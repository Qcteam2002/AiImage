version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: aiimage_db
    environment:
      POSTGRES_DB: aiimage
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
    ports:
      - "5441:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - aiimage_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d aiimage"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: aiimage_redis
    ports:
      - "6390:6379"
    networks:
      - aiimage_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: aiimage_backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://admin:admin123@postgres:5432/aiimage?schema=public
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-this}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
    volumes:
      - ./backend/uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - aiimage_network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  aiimage_network:
    driver: bridge
