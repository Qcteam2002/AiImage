import express from 'express';
import { PrismaClient } from '@prisma/client';

const router = express.Router();
const prisma = new PrismaClient();

// Product Discovery API endpoint
router.post('/suggest', async (req, res) => {
  try {
    console.log('üîç [Product Discovery] Request received:', req.body);
    
    const { 
      business_model, 
      niches, 
      competition_level, 
      target_market, 
      time_factor = 'evergreen',
      language = 'vi',
      submit_date
    } = req.body;

    console.log('üîç [Product Discovery] Parsed params:', { 
      business_model, 
      niches, 
      competition_level, 
      target_market, 
      time_factor, 
      language,
      submit_date
    });

    // Build comprehensive prompt for AI
    const prompt = `B·∫°n l√† m·ªôt nh√† ph√¢n t√≠ch xu h∆∞·ªõng v√† chi·∫øn l∆∞·ª£c gia s·∫£n ph·∫©m E-commerce h√†ng ƒë·∫ßu. Nhi·ªám v·ª• c·ªßa b·∫°n l√† t√¨m ra c√°c c∆° h·ªôi s·∫£n ph·∫©m ti·ªÅm nƒÉng cho m·ªôt doanh nh√¢n m·ªõi b·∫Øt ƒë·∫ßu, d·ª±a tr√™n c√°c ti√™u ch√≠ h·ªç cung c·∫•p.

**TI√äU CH√ç C·ª¶A NG∆Ø·ªúI D√ôNG:**
- **M√¥ h√¨nh Kinh doanh:** ${business_model}
- **Lƒ©nh v·ª±c quan t√¢m:** ${niches.join(', ')}
- **M·ª©c ƒë·ªô c·∫°nh tranh mong mu·ªën:** ${competition_level}
- **Th·ªã tr∆∞·ªùng m·ª•c ti√™u:** ${target_market}
- **Y·∫øu t·ªë th·ªùi gian:** ${time_factor}
- **Ng√¥n ng·ªØ:** ${language}
- **Ng√†y submit:** ${submit_date ? new Date(submit_date).toLocaleDateString('vi-VN', { 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric',
    weekday: 'long'
  }) : 'Kh√¥ng x√°c ƒë·ªãnh'}

**QUY TR√åNH L√ÄM VI·ªÜC C·ª¶A B·∫†N:**

1. **Ph√¢n t√≠ch Th·ªùi ƒëi·ªÉm:** D·ª±a v√†o y·∫øu t·ªë th·ªùi gian ƒë√£ ch·ªçn v√† ng√†y submit hi·ªán t·∫°i, h√£y x√°c ƒë·ªãnh c√°c c∆° h·ªôi ph√π h·ª£p.
   - **N·∫øu l√† "seasonal":** D·ª±a v√†o ng√†y submit (${submit_date ? new Date(submit_date).toLocaleDateString('vi-VN', { 
     year: 'numeric', 
     month: 'long', 
     day: 'numeric'
   }) : 'hi·ªán t·∫°i'}), h√£y x√°c ƒë·ªãnh d·ªãp l·ªÖ l·ªõn s·∫Øp t·ªõi t·∫°i th·ªã tr∆∞·ªùng ${target_market}. V√≠ d·ª•: n·∫øu ƒëang l√† th√°ng 11-12, t·∫≠p trung v√†o T·∫øt Nguy√™n ƒê√°n; n·∫øu ƒëang l√† th√°ng 9-10, t·∫≠p trung v√†o Halloween/Black Friday.
   - **N·∫øu l√† "short_term":** H√£y s·ª≠ d·ª•ng c√¥ng c·ª• t√¨m ki·∫øm c·ªßa b·∫°n ƒë·ªÉ t√¨m c√°c ch·ªß ƒë·ªÅ, meme, c√¢u n√≥i viral ƒëang th·ªãnh h√†nh trong 30 ng√†y qua t·∫°i ${target_market} (t√≠nh t·ª´ ng√†y submit).
   - **N·∫øu l√† "evergreen":** H√£y t·∫≠p trung v√†o c√°c ng√°ch c√≥ nhu c·∫ßu ·ªïn ƒë·ªãnh, kh√¥ng ph·ª• thu·ªôc v√†o m√πa v·ª•.
2. **Brainstorm:** D·ª±a tr√™n c√°c lƒ©nh v·ª±c quan t√¢m, li·ªát k√™ 5-10 √Ω t∆∞·ªüng s·∫£n ph·∫©m ng√°ch ph√π h·ª£p v·ªõi m√¥ h√¨nh kinh doanh ƒë√£ ch·ªçn.

3. **Thu th·∫≠p d·ªØ li·ªáu:** V·ªõi m·ªói √Ω t∆∞·ªüng, h√£y s·ª≠ d·ª•ng c√¥ng c·ª• t√¨m ki·∫øm c·ªßa b·∫°n ƒë·ªÉ thu th·∫≠p c√°c d·ªØ li·ªáu sau cho th·ªã tr∆∞·ªùng ${target_market}:
   - ∆Ø·ªõc t√≠nh l∆∞·ª£ng t√¨m ki·∫øm h√†ng th√°ng (Search Volume).
   - Xu h∆∞·ªõng tr√™n Google Trends (12 th√°ng qua).
   - M·ª©c ƒë·ªô c·∫°nh tranh (s·ªë l∆∞·ª£ng listing tr√™n Amazon/eBay, chi ph√≠ CPC cho t·ª´ kh√≥a ch√≠nh).
   - Kho·∫£ng gi√° b√°n l·∫ª ph·ªï bi·∫øn.
   - ∆Ø·ªõc t√≠nh gi√° v·ªën (v√≠ d·ª• t·ª´ AliExpress cho dropshipping, ho·∫∑c chi ph√≠ s·∫£n xu·∫•t c∆° b·∫£n).

4. **Ph√¢n t√≠ch & Ch·∫•m ƒëi·ªÉm:** D·ª±a tr√™n d·ªØ li·ªáu thu th·∫≠p, h√£y ƒë√°nh gi√° t·ª´ng √Ω t∆∞·ªüng v√† ch·ªçn ra 3-4 c∆° h·ªôi t·ªët nh·∫•t. M·ªôt c∆° h·ªôi t·ªët c·∫ßn c√≥ s·ª± c√¢n b·∫±ng gi·ªØa nhu c·∫ßu cao, c·∫°nh tranh c√≥ th·ªÉ qu·∫£n l√Ω ƒë∆∞·ª£c, v√† ti·ªÅm nƒÉng l·ª£i nhu·∫≠n t·ªët.

5. **T·∫°o B√°o c√°o:** V·ªõi m·ªói c∆° h·ªôi ƒë∆∞·ª£c ch·ªçn, h√£y tr√¨nh b√†y th√¥ng tin theo ƒë·ªãnh d·∫°ng JSON d∆∞·ªõi ƒë√¢y.

**Y√äU C·∫¶U ƒê·∫¶U RA:**
Ng√¥n ng·ªØ: **${language === 'vi' ? 'Ti·∫øng Vi·ªát' : 'English'}**.
Tr·∫£ v·ªÅ m·ªôt m·∫£ng JSON (JSON array), m·ªói object trong m·∫£ng l√† m·ªôt c∆° h·ªôi s·∫£n ph·∫©m.

**QUAN TR·ªåNG - ƒê·ªäNH D·∫†NG JSON:**
- Ch·ªâ tr·∫£ v·ªÅ JSON thu·∫ßn t√∫y, KH√îNG c√≥ text gi·∫£i th√≠ch
- KH√îNG c√≥ d·∫•u xu·ªëng d√≤ng (\\n) trong JSON
- KH√îNG c√≥ backslash escape characters
- JSON ph·∫£i valid v√† parse ƒë∆∞·ª£c
- B·∫Øt ƒë·∫ßu b·∫±ng [ v√† k·∫øt th√∫c b·∫±ng ]

[
  {
    "product_name": "T√™n s·∫£n ph·∫©m g·ª£i √Ω",
    "image_query": "T·ª´ kh√≥a ƒë·ªÉ t√¨m h√¨nh ·∫£nh minh h·ªça cho s·∫£n ph·∫©m n√†y",
    "metrics": {
      "demand_score": 8,
      "competition_score": 4,
      "profit_potential": "Cao",
      "trend": "TƒÉng tr∆∞·ªüng"
    },
    "timing_analysis": {
      "type": "Seasonal",
      "window": "Th√°ng 12 - Th√°ng 2",
      "reason": "ƒê√¢y l√† s·∫£n ph·∫©m ph·ª•c v·ª• cho d·ªãp T·∫øt √Çm L·ªãch, nhu c·∫ßu mua s·∫Øm qu√† t·∫∑ng v√† trang tr√≠ tƒÉng ƒë·ªôt bi·∫øn."
    },
    "ai_summary": "M·ªôt ƒëo·∫°n vƒÉn ng·∫Øn (2-3 c√¢u) gi·∫£i th√≠ch t·∫°i sao s·∫£n ph·∫©m n√†y l√† m·ªôt c∆° h·ªôi t·ªët.",
    "detailed_analysis": {
      "opportunity_overview": "Gi·∫£i th√≠ch s√¢u h∆°n v·ªÅ th·ªã tr∆∞·ªùng v√† l√Ω do t·∫°i sao ƒë√¢y l√† th·ªùi ƒëi·ªÉm t·ªët ƒë·ªÉ tham gia.",
      "target_customer_profile": {
        "description": "M√¥ t·∫£ ng·∫Øn v·ªÅ kh√°ch h√†ng m·ª•c ti√™u.",
        "pain_points": ["N·ªói ƒëau 1", "N·ªói ƒëau 2"]
      },
      "marketing_angles": ["G√≥c ƒë·ªô marketing 1", "G√≥c ƒë·ªô marketing 2", "G√≥c ƒë·ªô marketing 3"],
      "potential_risks": ["R·ªßi ro ti·ªÅm ·∫©n 1", "R·ªßi ro ti·ªÅm ·∫©n 2"]
    },
    "shopee_search": {
      "keywords": [
        "T·ª´ kh√≥a 1 ƒë·ªÉ t√¨m tr√™n Shopee",
        "T·ª´ kh√≥a 2 ƒë·ªÉ t√¨m tr√™n Shopee",
        "T·ª´ kh√≥a 3 ƒë·ªÉ t√¨m tr√™n Shopee"
      ],
      "search_url": "https://shopee.vn/search?keyword=tu%20khoa%20san%20pham"
    }
  }
]`;

    console.log('üîç [Product Discovery] Prompt built, calling AI service...');

    // Call AI service
    const aiResponse = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.OPENROUTER_API_KEY}`,
        'Content-Type': 'application/json',
        'HTTP-Referer': process.env.OPENROUTER_REFERER || 'http://localhost:3000',
        'X-Title': 'AIComercer Product Discovery'
      },
      body: JSON.stringify({
        model: 'google/gemini-2.5-flash-preview-09-2025',
        messages: [
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 3000,
        temperature: 0.7
      })
    });

    console.log('üîç [Product Discovery] AI response status:', aiResponse.status);

    if (!aiResponse.ok) {
      const errorText = await aiResponse.text();
      console.error('üîç [Product Discovery] AI service error:', errorText);
      throw new Error(`AI service error: ${aiResponse.status} - ${errorText}`);
    }

    const aiData = await aiResponse.json() as any;
    const aiContent = aiData.choices?.[0]?.message?.content;

    console.log('üîç [Product Discovery] AI content received:', aiContent ? 'Yes' : 'No');

    if (!aiContent) {
      console.error('üîç [Product Discovery] No content from AI:', aiData);
      throw new Error('No content from AI');
    }

    // Parse AI response with improved error handling
    let opportunities;
    try {
      // Clean the AI response first
      let cleanContent = aiContent.trim();
      
      // Remove any text before the first [ and after the last ]
      const firstBracket = cleanContent.indexOf('[');
      const lastBracket = cleanContent.lastIndexOf(']');
      
      if (firstBracket !== -1 && lastBracket !== -1 && lastBracket > firstBracket) {
        cleanContent = cleanContent.substring(firstBracket, lastBracket + 1);
      }
      
      // Try to fix common JSON issues
      cleanContent = cleanContent
        .replace(/\\n/g, ' ')  // Replace \n with space
        .replace(/\\"/g, '"')  // Fix escaped quotes
        .replace(/\\'/g, "'")  // Fix escaped single quotes
        .replace(/\\\\/g, '\\'); // Fix double backslashes
      
      console.log('üîç [Product Discovery] Cleaned content:', cleanContent.substring(0, 200) + '...');
      
      opportunities = JSON.parse(cleanContent);
      console.log('üîç [Product Discovery] JSON parsed successfully');
      
    } catch (parseError) {
      console.log('üîç [Product Discovery] JSON parse failed:', parseError instanceof Error ? parseError.message : String(parseError));
      console.log('üîç [Product Discovery] Raw content:', aiContent.substring(0, 500) + '...');
      
      // Try to extract JSON from the content
      try {
        const jsonMatch = aiContent.match(/\[[\s\S]*\]/);
        if (jsonMatch) {
          const extractedJson = jsonMatch[0]
            .replace(/\\n/g, ' ')
            .replace(/\\"/g, '"')
            .replace(/\\'/g, "'");
          
          opportunities = JSON.parse(extractedJson);
          console.log('üîç [Product Discovery] Extracted JSON parsed successfully');
        } else {
          throw new Error('No JSON found in content');
        }
      } catch (extractError) {
        console.log('üîç [Product Discovery] JSON extraction failed, using fallback');
        // Fallback if JSON parsing fails
        opportunities = [
          {
            product_name: "S·∫£n ph·∫©m ti·ªÅm nƒÉng",
            image_query: "trending product",
            metrics: {
              demand_score: 7,
              competition_score: 5,
              profit_potential: "Trung b√¨nh",
              trend: "·ªîn ƒë·ªãnh"
            },
            timing_analysis: {
              type: "Evergreen",
              window: "Quanh nƒÉm",
              reason: "S·∫£n ph·∫©m c√≥ nhu c·∫ßu ·ªïn ƒë·ªãnh"
            },
            ai_summary: "ƒê√¢y l√† m·ªôt c∆° h·ªôi s·∫£n ph·∫©m ti·ªÅm nƒÉng d·ª±a tr√™n ph√¢n t√≠ch th·ªã tr∆∞·ªùng.",
            detailed_analysis: {
              opportunity_overview: "Th·ªã tr∆∞·ªùng c√≥ ti·ªÅm nƒÉng ph√°t tri·ªÉn t·ªët.",
              target_customer_profile: {
                description: "Kh√°ch h√†ng m·ª•c ti√™u ch√≠nh",
                pain_points: ["V·∫•n ƒë·ªÅ 1", "V·∫•n ƒë·ªÅ 2"]
              },
              marketing_angles: ["G√≥c ƒë·ªô 1", "G√≥c ƒë·ªô 2"],
              potential_risks: ["R·ªßi ro 1", "R·ªßi ro 2"]
            }
          }
        ];
      }
    }

    console.log('üîç [Product Discovery] Returning opportunities:', opportunities.length);
    res.json({ opportunities });

  } catch (error) {
    console.error('üîç [Product Discovery] Error:', error);
    res.status(500).json({ message: 'Internal server error', error: error instanceof Error ? error.message : 'Unknown error' });
  }
});

// Test endpoint for product discovery
router.post('/suggest-test', async (req, res) => {
  try {
    console.log('üß™ [Product Discovery Test] Request received:', req.body);
    
    const { 
      business_model, 
      country, 
      product_count = 5,
      start_date,
      end_date,
      submit_date,
      existing_ideas = []
    } = req.body;

    console.log('üß™ [Product Discovery Test] Parsed params:', { 
      business_model, 
      country, 
      product_count,
      start_date,
      end_date,
      submit_date,
      existing_ideas_count: existing_ideas.length
    });

    // Build comprehensive prompt for AI
    const prompt = `B·∫°n l√† m·ªôt nh√† ph√¢n t√≠ch xu h∆∞·ªõng v√† chi·∫øn l∆∞·ª£c gia s·∫£n ph·∫©m E-commerce h√†ng ƒë·∫ßu. Nhi·ªám v·ª• c·ªßa b·∫°n l√† t√¨m ra c√°c c∆° h·ªôi s·∫£n ph·∫©m ti·ªÅm nƒÉng cho m·ªôt doanh nh√¢n m·ªõi b·∫Øt ƒë·∫ßu, d·ª±a tr√™n c√°c ti√™u ch√≠ h·ªç cung c·∫•p.

**TI√äU CH√ç C·ª¶A NG∆Ø·ªúI D√ôNG:**
- **M√¥ h√¨nh Kinh doanh:** ${business_model}
- **Qu·ªëc gia/Khu v·ª±c:** ${country}
- **S·ªë l∆∞·ª£ng s·∫£n ph·∫©m g·ª£i √Ω:** ${product_count}
- **Th·ªùi gian b√°n:** T·ª´ ${start_date} ƒë·∫øn ${end_date}
- **Ng√†y submit:** ${submit_date ? new Date(submit_date).toLocaleDateString('vi-VN', { 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric',
    weekday: 'long'
  }) : 'Kh√¥ng x√°c ƒë·ªãnh'}

**QUY TR√åNH L√ÄM VI·ªÜC C·ª¶A B·∫†N:**

1. **Ph√¢n t√≠ch Th·ªùi ƒëi·ªÉm:** D·ª±a v√†o kho·∫£ng th·ªùi gian b√°n t·ª´ ${start_date} ƒë·∫øn ${end_date}, h√£y x√°c ƒë·ªãnh c√°c c∆° h·ªôi ph√π h·ª£p.
   - Ph√¢n t√≠ch c√°c d·ªãp l·ªÖ, s·ª± ki·ªán trong kho·∫£ng th·ªùi gian n√†y t·∫°i ${country}
   - X√°c ƒë·ªãnh xu h∆∞·ªõng theo m√πa ph√π h·ª£p
   - ƒê·ªÅ xu·∫•t s·∫£n ph·∫©m ph√π h·ª£p v·ªõi th·ªùi ƒëi·ªÉm

2. **Ph√¢n t√≠ch M√¥ h√¨nh Kinh doanh:** D·ª±a v√†o m√¥ h√¨nh "${business_model}", h√£y:
   - X√°c ƒë·ªãnh lo·∫°i s·∫£n ph·∫©m ph√π h·ª£p v·ªõi m√¥ h√¨nh n√†y
   - Ph√¢n t√≠ch r·ªßi ro v√† c∆° h·ªôi c·ªßa m√¥ h√¨nh
   - ƒê·ªÅ xu·∫•t chi·∫øn l∆∞·ª£c ph√π h·ª£p

3. **Thu th·∫≠p d·ªØ li·ªáu:** V·ªõi m·ªói √Ω t∆∞·ªüng, h√£y s·ª≠ d·ª•ng c√¥ng c·ª• t√¨m ki·∫øm c·ªßa b·∫°n ƒë·ªÉ thu th·∫≠p c√°c d·ªØ li·ªáu sau cho th·ªã tr∆∞·ªùng ${country}:
   - ∆Ø·ªõc t√≠nh l∆∞·ª£ng t√¨m ki·∫øm h√†ng th√°ng (Search Volume)
   - Xu h∆∞·ªõng tr√™n Google Trends (12 th√°ng qua)
   - M·ª©c ƒë·ªô c·∫°nh tranh (s·ªë l∆∞·ª£ng listing tr√™n Amazon/eBay, chi ph√≠ CPC cho t·ª´ kh√≥a ch√≠nh)
   - Kho·∫£ng gi√° b√°n l·∫ª ph·ªï bi·∫øn
   - ∆Ø·ªõc t√≠nh gi√° v·ªën (v√≠ d·ª• t·ª´ AliExpress cho dropshipping, ho·∫∑c chi ph√≠ s·∫£n xu·∫•t c∆° b·∫£n)

4. **Ph√¢n t√≠ch & Ch·∫•m ƒëi·ªÉm:** D·ª±a tr√™n d·ªØ li·ªáu thu th·∫≠p, h√£y ƒë√°nh gi√° t·ª´ng √Ω t∆∞·ªüng v√† ch·ªçn ra ${product_count} c∆° h·ªôi t·ªët nh·∫•t. M·ªôt c∆° h·ªôi t·ªët c·∫ßn c√≥ s·ª± c√¢n b·∫±ng gi·ªØa nhu c·∫ßu cao, c·∫°nh tranh c√≥ th·ªÉ qu·∫£n l√Ω ƒë∆∞·ª£c, v√† ti·ªÅm nƒÉng l·ª£i nhu·∫≠n t·ªët.

${existing_ideas.length > 0 ? `**QUAN TR·ªåNG - TR√ÅNH TR√ôNG L·∫∂P:**
Ng∆∞·ªùi d√πng ƒë√£ c√≥ ${existing_ideas.length} √Ω t∆∞·ªüng s·∫£n ph·∫©m sau:
${existing_ideas.map((idea: string, index: number) => `${index + 1}. ${idea}`).join('\n')}

H√£y t·∫°o ra ${product_count} √Ω t∆∞·ªüng s·∫£n ph·∫©m HO√ÄN TO√ÄN M·ªöI, kh√¥ng tr√πng l·∫∑p v·ªõi c√°c √Ω t∆∞·ªüng tr√™n. T·∫≠p trung v√†o c√°c ng√°ch kh√°c, s·∫£n ph·∫©m kh√°c, ho·∫∑c g√≥c ƒë·ªô ti·∫øp c·∫≠n kh√°c.` : ''}

5. **T·∫°o B√°o c√°o:** V·ªõi m·ªói c∆° h·ªôi ƒë∆∞·ª£c ch·ªçn, h√£y tr√¨nh b√†y th√¥ng tin theo ƒë·ªãnh d·∫°ng JSON d∆∞·ªõi ƒë√¢y.

**Y√äU C·∫¶U ƒê·∫¶U RA:**
Ng√¥n ng·ªØ: **Ti·∫øng Vi·ªát**.
Tr·∫£ v·ªÅ m·ªôt m·∫£ng JSON (JSON array), m·ªói object trong m·∫£ng l√† m·ªôt c∆° h·ªôi s·∫£n ph·∫©m.

**B·∫ÆT BU·ªòC V·ªÄ TH·ªúI GIAN:**
- Trong "timing_analysis", tr∆∞·ªùng "window" PH·∫¢I ƒë√∫ng ch√≠nh x√°c: "${start_date} - ${end_date}" (bao g·ªìm c·∫£ ng√†y k·∫øt th√∫c).
- Th√™m tr∆∞·ªùng "window_months": m·ªôt m·∫£ng li·ªát k√™ t·∫•t c·∫£ c√°c th√°ng trong kho·∫£ng th·ªùi gian tr√™n theo ƒë·ªãnh d·∫°ng YYYY-MM (bao g·ªìm c·∫£ th√°ng b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c). V√≠ d·ª•: ["2025-10", "2025-11", "2025-12"].

**QUAN TR·ªåNG - ƒê·ªäNH D·∫†NG JSON:**
- CH·ªà tr·∫£ v·ªÅ JSON thu·∫ßn t√∫y, KH√îNG c√≥ b·∫•t k·ª≥ text gi·∫£i th√≠ch n√†o
- KH√îNG c√≥ d·∫•u xu·ªëng d√≤ng (\\n) trong JSON
- KH√îNG c√≥ backslash escape characters
- JSON ph·∫£i valid v√† parse ƒë∆∞·ª£c
- B·∫Øt ƒë·∫ßu b·∫±ng [ v√† k·∫øt th√∫c b·∫±ng ]
- KH√îNG ƒë∆∞·ª£c th√™m b·∫•t k·ª≥ text n√†o tr∆∞·ªõc ho·∫∑c sau JSON
- KH√îNG ƒë∆∞·ª£c gi·∫£i th√≠ch v·ªÅ vi·ªác thu th·∫≠p d·ªØ li·ªáu hay h·∫°n ch·∫ø c·ªßa AI

[
  {
    "product_name": "T√™n s·∫£n ph·∫©m g·ª£i √Ω",
    "image_query": "T·ª´ kh√≥a ƒë·ªÉ t√¨m h√¨nh ·∫£nh minh h·ªça cho s·∫£n ph·∫©m n√†y",
    "metrics": {
      "demand_score": 8,
      "competition_score": 4,
      "profit_potential": "Cao",
      "trend": "TƒÉng tr∆∞·ªüng"
    },
    "timing_analysis": {
      "type": "Seasonal",
      "window": "Th√°ng 12 - Th√°ng 2",
      "reason": "ƒê√¢y l√† s·∫£n ph·∫©m ph·ª•c v·ª• cho d·ªãp T·∫øt √Çm L·ªãch, nhu c·∫ßu mua s·∫Øm qu√† t·∫∑ng v√† trang tr√≠ tƒÉng ƒë·ªôt bi·∫øn."
    },
    "ai_summary": "M·ªôt ƒëo·∫°n vƒÉn ng·∫Øn (2-3 c√¢u) gi·∫£i th√≠ch t·∫°i sao s·∫£n ph·∫©m n√†y l√† m·ªôt c∆° h·ªôi t·ªët.",
    "detailed_analysis": {
      "opportunity_overview": "Gi·∫£i th√≠ch s√¢u h∆°n v·ªÅ th·ªã tr∆∞·ªùng v√† l√Ω do t·∫°i sao ƒë√¢y l√† th·ªùi ƒëi·ªÉm t·ªët ƒë·ªÉ tham gia.",
      "target_customer_profile": {
        "description": "M√¥ t·∫£ ng·∫Øn v·ªÅ kh√°ch h√†ng m·ª•c ti√™u.",
        "pain_points": ["N·ªói ƒëau 1", "N·ªói ƒëau 2"]
      },
      "marketing_angles": ["G√≥c ƒë·ªô marketing 1", "G√≥c ƒë·ªô marketing 2", "G√≥c ƒë·ªô marketing 3"],
      "potential_risks": ["R·ªßi ro ti·ªÅm ·∫©n 1", "R·ªßi ro ti·ªÅm ·∫©n 2"]
    }
  }
]`;

    console.log('üß™ [Product Discovery Test] Prompt built, calling AI service...');

    // Call AI service
    const aiResponse = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.OPENROUTER_API_KEY}`,
        'Content-Type': 'application/json',
        'HTTP-Referer': process.env.OPENROUTER_REFERER || 'http://localhost:3000',
        'X-Title': 'AIComercer Product Discovery Test'
      },
      body: JSON.stringify({
        model: 'google/gemini-2.5-flash-preview-09-2025',
        messages: [
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 4000,
        temperature: 0.7
      })
    });

    console.log('üß™ [Product Discovery Test] AI response status:', aiResponse.status);

    if (!aiResponse.ok) {
      const errorText = await aiResponse.text();
      console.error('üß™ [Product Discovery Test] AI service error:', errorText);
      throw new Error(`AI service error: ${aiResponse.status} - ${errorText}`);
    }

    const aiData = await aiResponse.json() as any;
    const aiContent = aiData.choices?.[0]?.message?.content;

    console.log('üß™ [Product Discovery Test] AI content received:', aiContent ? 'Yes' : 'No');

    if (!aiContent) {
      console.error('üß™ [Product Discovery Test] No content from AI:', aiData);
      throw new Error('No content from AI');
    }

    // Parse AI response with improved error handling
    let opportunities;
    try {
      // Clean the AI response first
      let cleanContent = aiContent.trim();
      
      // Remove any text before the first [ and after the last ]
      const firstBracket = cleanContent.indexOf('[');
      const lastBracket = cleanContent.lastIndexOf(']');
      
      if (firstBracket !== -1 && lastBracket !== -1 && lastBracket > firstBracket) {
        cleanContent = cleanContent.substring(firstBracket, lastBracket + 1);
      }
      
      // Try to fix common JSON issues
      cleanContent = cleanContent
        .replace(/\\n/g, ' ')  // Replace \n with space
        .replace(/\\"/g, '"')  // Fix escaped quotes
        .replace(/\\'/g, "'")  // Fix escaped single quotes
        .replace(/\\\\/g, '\\') // Fix double backslashes
        .replace(/\n/g, ' ')   // Replace actual newlines with space
        .replace(/\r/g, ' ')   // Replace carriage returns
        .replace(/\t/g, ' ');  // Replace tabs
      
      console.log('üß™ [Product Discovery Test] Cleaned content:', cleanContent.substring(0, 200) + '...');
      
      opportunities = JSON.parse(cleanContent);
      console.log('üß™ [Product Discovery Test] JSON parsed successfully');
      
    } catch (parseError) {
      console.log('üß™ [Product Discovery Test] JSON parse failed:', parseError instanceof Error ? parseError.message : String(parseError));
      console.log('üß™ [Product Discovery Test] Raw content:', aiContent.substring(0, 500) + '...');
      
      // Try multiple extraction methods
      try {
        // Method 1: Find JSON array with regex
        const jsonMatch = aiContent.match(/\[[\s\S]*?\]/);
        if (jsonMatch) {
          let extractedJson = jsonMatch[0]
            .replace(/\\n/g, ' ')
            .replace(/\\"/g, '"')
            .replace(/\\'/g, "'")
            .replace(/\n/g, ' ')
            .replace(/\r/g, ' ')
            .replace(/\t/g, ' ');
          
          opportunities = JSON.parse(extractedJson);
          console.log('üß™ [Product Discovery Test] Extracted JSON parsed successfully');
        } else {
          // Method 2: Try to find complete JSON objects
          const jsonObjects = aiContent.match(/\{[^{}]*"product_name"[^{}]*\}/g);
          if (jsonObjects && jsonObjects.length > 0) {
            const jsonArray = '[' + jsonObjects.join(',') + ']';
            opportunities = JSON.parse(jsonArray);
            console.log('üß™ [Product Discovery Test] JSON objects extracted successfully');
          } else {
            throw new Error('No JSON found in content');
          }
        }
      } catch (extractError) {
        console.log('üß™ [Product Discovery Test] JSON extraction failed, using fallback');
        // Fallback if JSON parsing fails - create mock data based on request
        const mockProducts = [];
        const productTypes = ["Premium", "Budget", "Eco-friendly", "Tech", "Lifestyle", "Health", "Beauty", "Home", "Sports", "Travel"];
        
        for (let i = 1; i <= Math.min(product_count, 5); i++) {
          const productType = productTypes[(i - 1) % productTypes.length];
          const productName = existing_ideas.length > 0 
            ? `S·∫£n ph·∫©m ${productType} ${business_model} ${i + existing_ideas.length} - ${country}`
            : `S·∫£n ph·∫©m ${productType} ${business_model} ${i} - ${country}`;
            
          mockProducts.push({
            product_name: productName,
            image_query: `${productType} ${business_model} product`,
            metrics: {
              demand_score: Math.floor(Math.random() * 4) + 6, // 6-10
              competition_score: Math.floor(Math.random() * 4) + 3, // 3-6
              profit_potential: ["Cao", "Trung b√¨nh", "Th·∫•p"][Math.floor(Math.random() * 3)],
              trend: ["TƒÉng tr∆∞·ªüng", "·ªîn ƒë·ªãnh", "Gi·∫£m"][Math.floor(Math.random() * 3)]
            },
            timing_analysis: {
              type: "Seasonal",
              window: `${start_date} - ${end_date}`,
              reason: `S·∫£n ph·∫©m ${productType} ph√π h·ª£p v·ªõi th·ªùi gian t·ª´ ${start_date} ƒë·∫øn ${end_date} t·∫°i ${country}`
            },
            ai_summary: `ƒê√¢y l√† c∆° h·ªôi s·∫£n ph·∫©m ${productType} ${business_model} ti·ªÅm nƒÉng cho th·ªã tr∆∞·ªùng ${country} trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn.`,
            detailed_analysis: {
              opportunity_overview: `Th·ªã tr∆∞·ªùng ${country} c√≥ ti·ªÅm nƒÉng ph√°t tri·ªÉn t·ªët cho m√¥ h√¨nh ${business_model} v·ªõi s·∫£n ph·∫©m ${productType}.`,
              target_customer_profile: {
                description: `Kh√°ch h√†ng m·ª•c ti√™u t·∫°i ${country} quan t√¢m ƒë·∫øn ${productType} ${business_model}`,
                pain_points: ["V·∫•n ƒë·ªÅ 1", "V·∫•n ƒë·ªÅ 2"]
              },
              marketing_angles: [`G√≥c ƒë·ªô ${productType} 1`, `G√≥c ƒë·ªô ${productType} 2`],
              potential_risks: ["R·ªßi ro th·ªã tr∆∞·ªùng", "R·ªßi ro c·∫°nh tranh"]
            },
            shopee_search: {
              keywords: [
                `${productType} ${business_model} ch√≠nh h√£ng`,
                `${productType} ${business_model} gi√° r·∫ª`,
                `${productType} ${business_model} t·ªët nh·∫•t`
              ],
              search_url: `https://shopee.vn/search?keyword=${encodeURIComponent(productType + ' ' + business_model)}`
            }
          });
        }
        opportunities = mockProducts;
      }
    }

    // Enrich results with Shopee search helper if missing
    const enriched = (opportunities || []).map((item: any) => {
      if (item && !item.shopee_search) {
        const base = (item.product_name || '').toString().trim();
        const keywords = base
          ? [
              `${base} ch√≠nh h√£ng`,
              `${base} gi√° r·∫ª`,
              `${base} t·ªët nh·∫•t`
            ]
          : [];
        const first = keywords[0] || base || '';
        return {
          ...item,
          shopee_search: {
            keywords,
            search_url: first ? `https://shopee.vn/search?keyword=${encodeURIComponent(first)}` : undefined,
          },
        };
      }
      return item;
    });

    // Compute window months server-side to ensure inclusion of full range
    const toMonths = (start: string, end: string) => {
      try {
        const out: string[] = [];
        const s = new Date(start);
        const e = new Date(end);
        if (isNaN(s.getTime()) || isNaN(e.getTime())) return out;
        const d = new Date(Date.UTC(s.getUTCFullYear(), s.getUTCMonth(), 1));
        const last = new Date(Date.UTC(e.getUTCFullYear(), e.getUTCMonth(), 1));
        while (d <= last) {
          out.push(`${d.getUTCFullYear()}-${String(d.getUTCMonth() + 1).padStart(2, '0')}`);
          d.setUTCMonth(d.getUTCMonth() + 1);
        }
        return out;
      } catch { return []; }
    };

    const enrichedWithWindow = enriched.map((item: any) => ({
      ...item,
      timing_analysis: {
        ...item.timing_analysis,
        computed_window: `${start_date} - ${end_date}`,
        computed_window_months: toMonths(start_date, end_date),
      }
    }));

    console.log('üß™ [Product Discovery Test] Returning opportunities:', enrichedWithWindow.length);
    res.json({ 
      success: true,
      opportunities: enrichedWithWindow,
      test_info: {
        business_model,
        country,
        product_count,
        start_date,
        end_date,
        submit_date
      }
    });

  } catch (error) {
    console.error('üß™ [Product Discovery Test] Error:', error);
    res.status(500).json({ 
      success: false,
      message: 'Internal server error', 
      error: error instanceof Error ? error.message : 'Unknown error' 
    });
  }
});

export default router;
