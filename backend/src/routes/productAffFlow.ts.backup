import express, { Request, Response } from 'express';
import { prisma } from '../database/client';
import { authenticate, AuthenticatedRequest } from '../middleware/auth';
import axios from 'axios';

const router = express.Router();

// Get all products
router.get('/', authenticate,   async (req: Request, res: Response) => {
    try {
      const authenticatedReq = req as AuthenticatedRequest;
    console.log('üîç [ProductAff] GET / - Fetching products');
    const { search, status, limit = 50, offset = 0 } = req.query;
    const userId = authenticatedReq.user?.id;

    if (!userId) {
      console.log('‚ùå [ProductAff] GET / - Unauthorized: No userId');
      return res.status(401).json({ message: 'Unauthorized' });
    }

    const where: any = {
      userId: userId,
    };

    if (search) {
      where.OR = [
        { title: { contains: search as string, mode: 'insensitive' } },
        { description: { contains: search as string, mode: 'insensitive' } },
        { target_market: { contains: search as string, mode: 'insensitive' } },
      ];
    }

    if (status) {
      where.status = status;
    }

    const [products, total] = await Promise.all([
      prisma.productAff.findMany({
        where,
        orderBy: { created_at: 'desc' },
        take: Number(limit),
        skip: Number(offset),
      }),
      prisma.productAff.count({ where }),
    ]);

    res.json({
      products,
      total,
      limit: Number(limit),
      offset: Number(offset),
    });
  } catch (error) {
    console.error('Error fetching products:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// Get single product
router.get('/:id', authenticate,   async (req: Request, res: Response) => {
    try {
      const authenticatedReq = req as AuthenticatedRequest;
    const { id } = req.params;
    const userId = authenticatedReq.user?.id;

    if (!userId) {
      return res.status(401).json({ message: 'Unauthorized' });
    }

    const product = await prisma.productAff.findFirst({
      where: {
        id: id,
        userId: userId,
      },
    });

    if (!product) {
      return res.status(404).json({ message: 'Product not found' });
    }

    res.json(product);
  } catch (error) {
    console.error('Error fetching product:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// Create new product
router.post('/', authenticate,   async (req: Request, res: Response) => {
    try {
      const authenticatedReq = req as AuthenticatedRequest;
    console.log('‚ûï [ProductAff] POST / - Creating new product');
    const { target_market, image1, image2, title, description } = req.body;
    const userId = authenticatedReq.user?.id;

    if (!userId) {
      console.log('‚ùå [ProductAff] POST / - Unauthorized: No userId');
      return res.status(401).json({ message: 'Unauthorized' });
    }

    if (!target_market || !image1) {
      return res.status(400).json({ message: 'Target market and image1 are required' });
    }

    const product = await prisma.productAff.create({
      data: {
        target_market,
        image1,
        image2,
        title,
        description,
        status: 'waiting',
        userId: userId,
      },
    });

    res.status(201).json(product);
  } catch (error) {
    console.error('Error creating product:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// Update product
router.put('/:id', authenticate, async (req: Request, res: Response) => {
  try {
    const authenticatedReq = req as AuthenticatedRequest;
    console.log('‚úèÔ∏è [ProductAff] PUT /:id - Updating product');
    const { id } = req.params;
    const { target_market, image1, image2, title, description } = req.body;
    const userId = authenticatedReq.user?.id;

    if (!userId) {
      console.log('‚ùå [ProductAff] PUT /:id - Unauthorized: No userId');
      return res.status(401).json({ message: 'Unauthorized' });
    }

    // Check if product exists and belongs to user
    const existingProduct = await prisma.productAff.findFirst({
      where: {
        id: id,
        userId: userId,
      },
    });

    if (!existingProduct) {
      console.log('‚ùå [ProductAff] PUT /:id - Product not found:', id);
      return res.status(404).json({ message: 'Product not found' });
    }

    // Only allow updating if status is not processing
    if (existingProduct.status === 'processing') {
      return res.status(400).json({ message: 'Cannot update product while analysis is in progress' });
    }

    const updateData: any = {};
    if (target_market !== undefined) updateData.target_market = target_market;
    if (image1 !== undefined) updateData.image1 = image1;
    if (image2 !== undefined) updateData.image2 = image2;
    if (title !== undefined) updateData.title = title;
    if (description !== undefined) updateData.description = description;

    const updatedProduct = await prisma.productAff.update({
      where: { id: id },
      data: updateData,
    });

    console.log('‚úÖ [ProductAff] PUT /:id - Product updated successfully');
    res.json(updatedProduct);
  } catch (error) {
    console.error('Error updating product:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// Analyze product
router.post('/:id/analyze', authenticate,   async (req: Request, res: Response) => {
    try {
      const authenticatedReq = req as AuthenticatedRequest;
    console.log('ü§ñ [ProductAff] POST /:id/analyze - Starting analysis');
    const { id } = req.params;
    const userId = authenticatedReq.user?.id;

    if (!userId) {
      console.log('‚ùå [ProductAff] POST /:id/analyze - Unauthorized: No userId');
      return res.status(401).json({ message: 'Unauthorized' });
    }

    const product = await prisma.productAff.findFirst({
      where: {
        id: id,
        userId: userId,
      },
    });

    if (!product) {
      console.log('‚ùå [ProductAff] POST /:id/analyze - Product not found:', id);
      return res.status(404).json({ message: 'Product not found' });
    }

    // Check if user has enough credits
    const user = await prisma.user.findUnique({
      where: { id: userId },
      select: { credits: true }
    });

    if (!user) {
      console.log('‚ùå [ProductAff] POST /:id/analyze - User not found:', userId);
      return res.status(404).json({ message: 'User not found' });
    }

    if (user.credits < 1) {
      console.log('‚ùå [ProductAff] POST /:id/analyze - Insufficient credits:', user.credits);
      return res.status(400).json({ 
        message: 'Insufficient credits. You need at least 1 credit to analyze a product.',
        credits: user.credits
      });
    }

    console.log('üìù [ProductAff] POST /:id/analyze - Product found:', {
      id: product.id,
      target_market: product.target_market,
      title: product.title
    });
    console.log('üí∞ [ProductAff] POST /:id/analyze - User credits:', user.credits);

    // Update status to processing
    await prisma.productAff.update({
      where: { id: id },
      data: { status: 'processing' },
    });
    console.log('üîÑ [ProductAff] POST /:id/analyze - Status updated to processing');

    try {
      console.log('üöÄ [ProductAff] POST /:id/analyze - Calling OpenRouter API');
      // Call OpenRouter API for analysis
      const analysisResult = await analyzeProductWithAI(product);
      console.log('‚úÖ [ProductAff] POST /:id/analyze - AI analysis completed');
      
      // Update product with analysis result and deduct credit
      const updatedProduct = await prisma.$transaction(async (tx) => {
        // Update product status
        const updatedProduct = await tx.productAff.update({
          where: { id: id },
          data: {
            status: 'done',
            analysis_result: JSON.stringify(analysisResult),
            analyzed_at: new Date(),
          },
        });

        // Deduct 1 credit from user
        const updatedUser = await tx.user.update({
          where: { id: userId },
          data: {
            credits: {
              decrement: 1
            }
          },
          select: {
            id: true,
            email: true,
            credits: true
          }
        });

        console.log(`üí∞ [ProductAff] POST /:id/analyze - Credit deducted. User ${userId} now has ${updatedUser.credits} credits`);
        
        return updatedProduct;
      });

      res.json(updatedProduct);
    } catch (aiError) {
      console.error('AI Analysis error:', aiError);
      
      // Update status to error
      await prisma.productAff.update({
        where: { id: id },
        data: { status: 'error' },
      });

      res.status(500).json({ message: 'AI analysis failed' });
    }
  } catch (error) {
    console.error('Error analyzing product:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// Delete product
router.delete('/:id', authenticate,   async (req: Request, res: Response) => {
    try {
      const authenticatedReq = req as AuthenticatedRequest;
    const { id } = req.params;
    const userId = authenticatedReq.user?.id;

    if (!userId) {
      return res.status(401).json({ message: 'Unauthorized' });
    }

    const product = await prisma.productAff.findFirst({
      where: {
        id: id,
        userId: userId,
      },
    });

    if (!product) {
      return res.status(404).json({ message: 'Product not found' });
    }

    await prisma.productAff.delete({
      where: { id: id },
    });

    res.status(204).send();
  } catch (error) {
    console.error('Error deleting product:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// AI Analysis function
async function analyzeProductWithAI(product: any) {
  const openRouterApiKey = process.env.OPENROUTER_API_KEY;
  
  if (!openRouterApiKey) {
    throw new Error('OpenRouter API key not configured');
  }

  const prompt = `# Analyze product

# ‚úÖ üìå PROMPT HO√ÄN CH·ªàNH KHI PH√ÇN T√çCH S·∫¢N PH·∫®M(C√≥ S·ªë Li·ªáu)

*(Phi√™n b·∫£n t·ªëi ∆∞u cho Dropship / Affiliate ‚Äì B·∫¢N C√ì S·ªê LI·ªÜU + PH√ÇN KH√öC KH√ÅCH H√ÄNG M·ªû R·ªòNG)*

---

## üéØ **B·ªëi c·∫£nh**

T√¥i ƒëang nghi√™n c·ª©u v√† ƒë√°nh gi√° ti·ªÅm nƒÉng kinh doanh c·ªßa m·ªôt s·∫£n ph·∫©m theo h√¨nh th·ª©c **dropship ho·∫∑c affiliate**. T√¥i c·∫ßn m·ªôt b·∫£n ph√¢n t√≠ch th·ªã tr∆∞·ªùng chi ti·∫øt, c√≥ c·∫•u tr√∫c logic, insight r√µ r√†ng, ƒë·ªÉ:

- X√°c ƒë·ªãnh kh·∫£ nƒÉng b√°n h√†ng c·ªßa s·∫£n ph·∫©m
- Hi·ªÉu kh√°ch h√†ng m·ª•c ti√™u ƒë·ªß s√¢u ƒë·ªÉ ch·ªçn k√™nh, angle, c√°ch l√†m content
- Thi·∫øt k·∫ø c√°c n·ªôi dung truy·ªÅn th√¥ng hi·ªáu qu·∫£ (video, ads, caption‚Ä¶)

---

## üß† **Vai tr√≤ c·ªßa b·∫°n**

B·∫°n l√† chuy√™n gia ph√¢n t√≠ch th·ªã tr∆∞·ªùng, h√†nh vi kh√°ch h√†ng v√† chi·∫øn l∆∞·ª£c n·ªôi dung th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠.

B·∫°n kh√¥ng c·∫ßn l√†m s·∫£n ph·∫©m, ch·ªâ c·∫ßn gi√∫p t√¥i *b√°n s·∫£n ph·∫©m ng∆∞·ªùi kh√°c l√†m* th√¥ng qua **content hi·ªáu qu·∫£ & insight ƒë√∫ng**.

## üìù **Khi t√¥i g·ª≠i t√™n s·∫£n ph·∫©m + h√¨nh ·∫£nh**, th√¨ b·∫°n c·∫ßn ph·∫£i t√¨m ki·∫øm c√°c ngu·ªìn website uy t√≠nh v√† sau ƒë√≥ b·∫°n c·∫ßn tr·∫£ v·ªÅ ƒë·∫ßy ƒë·ªß c√°c ph·∫ßn sau, y√™u c·∫ßu t·∫•t c·∫£ c·∫ßn ph·∫£i c√≥ s·ªë li·ªáu ch·ª©ng minh, data r√µ r√†ng:

---

### **0. Executive Summary**

ƒê·ªÅ xu·∫•t: [N√™n / Kh√¥ng n√™n / N√™n nh∆∞ng c√≥ ƒëi·ªÅu ki·ªán] ‚Äî t√≥m t·∫Øt 1‚Äì2 c√¢u v√¨ sao.

ƒêi·ªÅu ki·ªán tri·ªÉn khai (n·∫øu c√≥): k√™nh ∆∞u ti√™n, nh√≥m kh√°ch h√†ng, ng√¢n s√°ch test.

KPI t·ªëi thi·ªÉu: Gross margin ‚â• __%, CPA/CAC ‚â§ __, BEP ‚â§ __ ƒë∆°n/th√°ng.

M·ª©c t·ª± tin: __%.

3‚Äì4 lu·∫≠n ƒëi·ªÉm then ch·ªët, sau ƒë√≥ xu·ªëng d√≤ng m√¥ t·∫£ chi ti·∫øt t·ª´ng lu·∫≠n ƒëi·ªÉm v√† s·ªë li·ªáu k√®m theo ƒë·ªÉ c≈©ng c·ªë

Nhu c·∫ßu & Xu h∆∞·ªõng: Google Trends 12m = __%, SV = __; Ngu·ªìn: __. ‚Üí T√°c ƒë·ªông: __.

C·∫°nh tranh & Gi√°: #listing = __, price range = __, top-3 share = __%; Ngu·ªìn: __. ‚Üí T√°c ƒë·ªông: __.

Chi ph√≠ ti·∫øp c·∫≠n: CPC/CPA benchmark = /; CR = __%; Ngu·ªìn: __. ‚Üí T√°c ƒë·ªông: __.

Bi√™n l·ª£i nhu·∫≠n & v·∫≠n h√†nh: Gi√° v·ªën = __, ph√≠ s√†n/ship = __, margin g·ªôp = __%; Ngu·ªìn: __. ‚Üí T√°c ƒë·ªông: __.

C∆° h·ªôi l·ªõn nh·∫•t chi ti·∫øt t·∫°i sao ƒë√¢y l√† c∆° h·ªôi l·ªõn, c√≥ kh·∫£ nƒÉng win bao nhi√™u % d·ª±a tr√™n s·ªë li·ªáu search web

M√¥ t·∫£: __ (ƒë√≤n b·∫©y: k√™nh/angle/USP).

Win-rate ∆∞·ªõc t√≠nh: __%.

Ch·ªâ s·ªë ki·ªÉm ch·ª©ng: SV = __, CTR = __%, CR = __%, CPC = __; Ngu·ªìn: __.

K·∫ø ho·∫°ch t·∫≠n d·ª•ng nhanh: b∆∞·ªõc 1 __ ‚Üí b∆∞·ªõc 2 __ ‚Üí b∆∞·ªõc 3 __.

R·ªßi ro l·ªõn nh·∫•t chi ti·∫øt t·∫°i sao ƒë√¢y l√† r·ªßi ro l·ªõn, data n√†o d·ªØ li·ªáu n√†o ƒë·ªÉ ƒë√∫c k·∫øt ƒë∆∞·ª£c v·∫•n ƒë·ªÅ n√†y

M√¥ t·∫£: __ (ph√°p l√Ω/trend/logistics/copycat‚Ä¶).

X√°c su·∫•t x·∫£y ra: __% & M·ª©c t√°c ƒë·ªông: __ (doanh thu/margin).

D·∫•u hi·ªáu c·∫£nh b√°o s·ªõm: __ (v√≠ d·ª• CPC tƒÉng >__%, report DMCA __%).

B·∫±ng ch·ª©ng d·ªØ li·ªáu: metric = __, gi√° tr·ªã = __; Ngu·ªìn: __.

Bi·ªán ph√°p gi·∫£m thi·ªÉu: __ (ph∆∞∆°ng √°n B/C, thay angle, ƒë·ªïi k√™nh, ƒëa d·∫°ng m·∫´u‚Ä¶).

---

## 1. Ti·ªÅm NƒÉng B√°n H√†ng & T·ª´ Kh√≥a

**Kh·∫£ nƒÉng b√°n h√†ng**

- ƒê√°nh gi√°: Cho ƒë√°nh gi√° ƒë√∫ng nh·∫•t v√† s·ªë li·ªáu theo ƒë√°nh gi√° th·∫ø n√†o
- Quy m√¥ th·ªã tr∆∞·ªùng: ‚Ä¶ USD (nƒÉm g·∫ßn nh·∫•t), CAGR ‚Ä¶% (giai ƒëo·∫°n 3‚Äì5 nƒÉm g·∫ßn nh·∫•t).
- Xu h∆∞·ªõng Google Trends: tƒÉng/gi·∫£m ‚Ä¶% trong 12 th√°ng.
- D·ªØ li·ªáu TMƒêT 3 th√°ng g·∫ßn ƒë√¢y nh·∫•t (Amazon, Shopee, Etsy, AliExpress):
    - S·ªë l∆∞·ª£ng listing
    - S·∫£n ph·∫©m b√°n/th√°ng (∆∞·ªõc t√≠nh)
    - M·ª©c tƒÉng tr∆∞·ªüng % so v·ªõi c√πng k·ª≥ (3 th√°ng tr∆∞·ªõc ƒë√≥)
- **Ngu·ªìn tham kh·∫£o:** Statista, Grand View Research, Marketplace Insights, v.v.Statista, GVR, Ahrefs, Marketplace Pulse, TikTok Trends‚Ä¶

**20 t·ª´ kh√≥a hi·ªáu qu·∫£ nh·∫•t c√≥ th·ªÉ d√πng ƒë·ªÉ ch·∫°y** (chia 4 nh√≥m, m·ªói t·ª´ kh√≥a c√≥ Search Volume, CPC, Competition):

1. **Th√¥ng tin** (v√≠ d·ª•: what is‚Ä¶, how to use‚Ä¶)
2. **Mua h√†ng** (buy, price, sale‚Ä¶)
3. **So s√°nh** (vs, best, top 10‚Ä¶)
4. **Li√™n quan ƒë·∫øn v·∫•n ƒë·ªÅ** (painpoint keyword‚Ä¶)

M·ªói nh√≥m 4-8 t·ª´ kh√≥a, li·ªát k√™ t·ª´ cao ‚Üí th·∫•p.

## 2. V·∫•n ƒê·ªÅ S·∫£n Ph·∫©m Gi·∫£i Quy·∫øt

- **V·∫•n ƒë·ªÅ ƒë√£ ƒë∆∞·ª£c gi·∫£i quy·∫øt t·ªët:**
    - Li·ªát k√™ k√®m % kh√°ch h√†ng h√†i l√≤ng v√† t·∫°i sao h√†i l√≤ng s·ªë li·ªáu chi ti·∫øt n·∫øu c√≥. (t·ª´ survey/review marketplace).
- **V·∫•n ƒë·ªÅ ch∆∞a ƒë∆∞·ª£c gi·∫£i quy·∫øt t·ªët (C∆° h·ªôi c·∫£i ti·∫øn):**
    - Li·ªát k√™ k√®m % kh√°ch h√†ng ch∆∞a ƒë∆∞·ª£c serve t·ªët ·ªü nh·ªØng v·∫•n ƒë·ªÅ n√†y ho·∫∑c nhu c·∫ßu ch∆∞a ƒë√°p ·ª©ng
    - Tr√≠ch d·∫´n feedback th·ª±c t·∫ø t·ª´ review (Amazon/Etsy/Reddit‚Ä¶) n·∫øu c√≥.

### **3. Ph√¢n T√≠ch 5 Nh√≥m Kh√°ch H√†ng M·ª•c Ti√™u (B·∫¢N M·ªû R·ªòNG)**

### M·ªói nh√≥m c·∫ßn ph√¢n t√≠ch ƒë·∫ßy ƒë·ªß b·∫£ng sau:

### üßë‚Äçü§ù‚Äçüßë **Nh√≥m X: [T√™n nh√≥m kh√°ch h√†ng]**

| **H·∫°ng m·ª•c** | **N·ªôi dung c·ª• th·ªÉ** |
| --- | --- |
| Ph√¢n kh√∫c th·ªã ph·∫ßn | % ∆∞·ªõc t√≠nh nh√≥m n√†y chi·∫øm |
| Gi·ªõi t√≠nh | % Nam / N·ªØ |
| ƒê·ªô tu·ªïi ch√≠nh | Kho·∫£ng tu·ªïi ch√≠nh, % ph√¢n b·ªï |
| Ngh·ªÅ nghi·ªáp ph·ªï bi·∫øn | VƒÉn ph√≤ng, n·ªôi tr·ª£, h·ªçc sinh, freelancer‚Ä¶ |
| V·ªã tr√≠ ƒë·ªãa l√Ω ch√≠nh | Urban / Suburban / Rural / theo qu·ªëc gia c·ª• th·ªÉ |
| T·∫ßn su·∫•t mua h√†ng | Theo m√πa / h√†ng th√°ng / d·ªãp l·ªÖ |
| Ng√¢n s√°ch trung b√¨nh | $ / m·ªói ƒë∆°n ho·∫∑c m·ªói nƒÉm |
| H√†nh vi t√¨m ki·∫øm & mua | H·ªç t√¨m g√¨, mua ·ªü ƒë√¢u, ra quy·∫øt ƒë·ªãnh theo y·∫øu t·ªë n√†o |
| Ng·ªØ c·∫£nh s·ª≠ d·ª•ng | Mua ƒë·ªÉ l√†m g√¨? D√πng ·ªü ƒë√¢u? V·ªõi ai? |
| ƒê·ªông l·ª±c c·∫£m x√∫c ch√≠nh | C·∫£m gi√°c mong mu·ªën sau khi mua (v√≠ d·ª•: b√© vui, m·∫π an t√¢m‚Ä¶) |
| Pain Points th∆∞·ªùng g·∫∑p | Li·ªát k√™ 3‚Äì5 v·∫•n ƒë·ªÅ ch√≠nh |
| K√™nh ti·∫øp c·∫≠n hi·ªáu qu·∫£ | TikTok, Facebook, Google, Shopee‚Ä¶ |
| T·ª∑ l·ªá t√°i mua / upsell | C√≥ / Kh√¥ng, % ∆∞·ªõc t√≠nh |
| T·ª∑ l·ªá t√°i mua / upsell | C√≥ / Kh√¥ng, % ∆∞·ªõc t√≠nh |

---

### **ƒê√°nh gi√° Pain Points theo m·ª©c ƒë·ªô**

- **CAO:** ‚Ä¶ (% kh√°ch h√†ng)
- **TRUNG B√åNH:** ‚Ä¶ (% kh√°ch h√†ng)
- **TH·∫§P:** ‚Ä¶ (% kh√°ch h√†ng)

---

### **B·∫£ng ƒë√°nh gi√° Pain Points theo m·ª©c ƒë·ªô v√† gi·∫£i ph√°p ƒë·ªÅ xu·∫•t (chu·∫©n c·∫•u tr√∫c m·ªõi)**

| **Pain Point** | **Gi·∫£i ph√°p (USP)** | **G·ª£i √Ω n·ªôi dung / content hook** | **G·ª£i √Ω Video / H√¨nh ·∫£nh Qu·∫£ng C√°o (n·∫øu c√≥)** |
| --- | --- | --- | --- |
| [V·∫•n ƒë·ªÅ c·ª• th·ªÉ ph·∫£i th·∫≠t chi ti·∫øt l√† kh√°ch h√†ng ƒëang b·ªã g√¨, b·ªã th·∫ø n√†o] (% kh√°ch h√†ng b·ªã) | [USP ƒë·ªÉ gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ c·ªßa kh√°ch l√† g√¨, d·ªÖ hi·ªÉu, ƒë√∫ng insight] | [C√¢u n√≥i/d√≤ng text d√πng l√†m content m·ªü ƒë·∫ßu, ti√™u ƒë·ªÅ, caption‚Ä¶ c·∫ßn ph·∫£i chi ti·∫øt hay v√† n√™n l√†m sao ch·ª© ko ghi chung chung] | [K·ªãch b·∫£n video ng·∫Øn kho·∫£ng 20s v√† chia ra t·ª´ng khung th·ªùi gian c·ª• th·ªÉ th·∫≠t chi ti·∫øt ƒë·ªÉ t·∫°o content cho c√°c k√™nh social nh∆∞ tiktok ho·∫∑c instagram] |

üìå L·∫∑p l·∫°i b·∫£ng n√†y ƒë·∫ßy ƒë·ªß ƒë√∫ng v·ªõi b·∫£ng tr√™n cho **t·ª´ng nh√≥m kh√°ch h√†ng m·ª•c ti√™u** (3 nh√≥m)


---

### **üîö K·∫øt lu·∫≠n:**

- Nh√≥m n√†o n√™n t·∫≠p trung tr∆∞·ªõc khi ch·∫°y content?
- Angle n√†o ti·ªÅm nƒÉng nh·∫•t ƒë·ªÉ ch·∫°y ads / organic post?
- C√≥ th·ªÉ upsell / k·∫øt h·ª£p combo g√¨?
- C√≥ r·ªßi ro g√¨ c·∫ßn l∆∞u √Ω khi b√°n s·∫£n ph·∫©m n√†y (v·ªÅ ph√°p l√Ω, th·ªã tr∆∞·ªùng, ngu·ªìn h√†ng‚Ä¶)?

t∆∞∆°ng t·ª± cho c√°c nh√≥m c√≤n l·∫°i, hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß ra, v√≠ d·ª• co 3 nh√≥m th√¨ m·ªói nh√≥m n√™n c√≥ ƒë·∫ßy ƒë·ªß k·∫øt lu·∫≠n

---

## üìä **Th√¥ng tin s·∫£n ph·∫©m c·∫ßn ph√¢n t√≠ch:**

**Target Market:** ${product.target_market}
**Product Title:** ${product.title || 'T·ª∞ ƒê·ªòNG EXTRACT T·ª™ H√åNH ·∫¢NH'}
**Product Description:** ${product.description || 'T·ª∞ ƒê·ªòNG EXTRACT T·ª™ H√åNH ·∫¢NH'}
**Product Image 1:** [H√¨nh ·∫£nh s·∫£n ph·∫©m 1]
**Product Image 2:** ${product.image2 ? '[H√¨nh ·∫£nh s·∫£n ph·∫©m 2]' : 'Kh√¥ng c√≥ h√¨nh ·∫£nh th·ª© 2'}

**L∆ØU √ù QUAN TR·ªåNG:**
- N·∫øu Product Title l√† "T·ª∞ ƒê·ªòNG EXTRACT T·ª™ H√åNH ·∫¢NH", h√£y ph√¢n t√≠ch h√¨nh ·∫£nh ƒë·ªÉ t·∫°o ra title s·∫£n ph·∫©m ch√≠nh x√°c
- N·∫øu Product Description l√† "T·ª∞ ƒê·ªòNG EXTRACT T·ª™ H√åNH ·∫¢NH", h√£y ph√¢n t√≠ch h√¨nh ·∫£nh ƒë·ªÉ t·∫°o ra m√¥ t·∫£ s·∫£n ph·∫©m chi ti·∫øt
- S·ª≠ d·ª•ng th√¥ng tin t·ª´ h√¨nh ·∫£nh ƒë·ªÉ b·ªï sung cho ph√¢n t√≠ch th·ªã tr∆∞·ªùng

---

## üìä **Y√™u c·∫ßu tr·∫£ v·ªÅ JSON**

Tr·∫£ v·ªÅ ƒë√∫ng c·∫•u tr√∫c JSON sau (b·∫±ng ti·∫øng vi·ªát):

\`\`\`json

{
  "executive_summary": {
    "recommendation": "G·ª£i √Ω c√≥ n√™n b√°n hay kh√¥ng v√† t·∫°i sao",
    "key_points": [
      "Lu·∫≠n ƒëi·ªÉm 1",
      "Lu·∫≠n ƒëi·ªÉm 2", 
      "Lu·∫≠n ƒëi·ªÉm 3",
      "Lu·∫≠n ƒëi·ªÉm 4 (n·∫øu c√≥)"
    ],
    "biggest_opportunity": "N·ªôi dung c∆° h·ªôi (chi ti·∫øt v√¨ sao ƒë√¢y l√† c∆° h·ªôi l·ªõn c√†ng chi ti·∫øt c√†ng t·ªët)",
    "biggest_risk": "N·ªôi dung r·ªßi ro (c√≥ s√¥ li·ªáu c·ª• th·ªÉ c√†ng chi ti√™t c√†ng t·ªët, v√≠ d·ª• t·∫°o sao c√≥ r·ªßi ro ƒë√≥ bao nhi√™u %)"
  },
  "market_and_keywords": {
    "sales_potential": "Cao / Trung b√¨nh / Th·∫•p",
    "market_size_usd": 0,
    "cagr_percent": 0,
    "google_trends_change_percent": 0,
    "marketplace_data": {
      "aliexpress": {
        "listings": 0,
        "sales_per_month": 0,
        "growth_percent": null
      },
      "etsy": {
        "listings": 0,
        "sales_per_month": 0,
        "growth_percent": null
      },
      "amazon": {
        "listings": 0,
        "sales_per_month": 0,
        "growth_percent": null
      },
      "shopee": {
        "listings": 0,
        "sales_per_month": 0,
        "growth_percent": null
      }
    },
    "keywords": {
      "informational": [
        { "keyword": "", "volume": 0, "cpc": 0, "competition": "" }
      ],
      "transactional": [
        { "keyword": "", "volume": 0, "cpc": 0, "competition": "" }
      ],
      "comparative": [
        { "keyword": "", "volume": 0, "cpc": 0, "competition": "" }
      ],
      "painpoint_related": [
        { "keyword": "", "volume": 0, "cpc": 0, "competition": "" }
      ]
    },
    "sources": ["Statista", "GVR", "Marketplace Pulse", "TikTok Trends"]
  },
  "product_problems": {
    "resolved": [
      { "problem": "V·∫•n ƒë·ªÅ", "satisfaction_percent": 0 }
    ],
    "unresolved": [
      {
        "problem": "V·∫•n ƒë·ªÅ",
        "unsatisfied_percent": 0,
        "example_feedback": "Tr√≠ch d·∫´n review n·∫øu c√≥"
      }
    ]
  },
"target_customers": [
  {
    "name": "T√™n nh√≥m kh√°ch h√†ng 1",
    "market_share_percent": 0,
    "gender_ratio": { "male": 0, "female": 0 },
    "age_range": "xx‚Äìyy",
    "occupations": [],
    "locations": "DANH S√ÅCH C√ÅC LOCATION C·ª¶A C√ÅC T·∫¨P SEGEMENTATION THEO TARGET MARKET ƒê√É ƒê∆ØA RA",
    "purchase_frequency": "Theo m√πa / Th∆∞·ªùng xuy√™n / D·ªãp l·ªÖ",
    "average_budget_usd": 0,
    "buying_behavior": "T√¨m g√¨? Mua ·ªü ƒë√¢u? Quy·∫øt ƒë·ªãnh d·ª±a v√†o?",
    "usage_context": "D√πng ·ªü ƒë√¢u, v·ªõi ai, m·ª•c ƒë√≠ch g√¨?",
    "emotional_motivations": "C·∫£m gi√°c mong mu·ªën",
    "common_painpoints": [
      "V·∫•n ƒë·ªÅ 1",
      "V·∫•n ƒë·ªÅ 2"
    ],
    "main_channels": ["TikTok", "Facebook", "Pinterest", "Google"],
    "repurchase_or_upsell": {
      "exists": true,
      "estimated_percent": 0
    },
    "painpoint_levels": {
      "high": {
        "percent": 0,
        "description": "M√¥ t·∫£ v·∫•n ƒë·ªÅ m·ª©c ƒë·ªô cao"
      },
      "medium": {
        "percent": 0,
        "description": "M√¥ t·∫£ v·∫•n ƒë·ªÅ m·ª©c ƒë·ªô trung b√¨nh"
      },
      "low": {
        "percent": 0,
        "description": "M√¥ t·∫£ v·∫•n ƒë·ªÅ m·ª©c ƒë·ªô th·∫•p"
      }
    },
    "solutions_and_content": [
      {
        "pain_point": "T√™n v·∫•n ƒë·ªÅ",
        "percent_of_customers": 0,
        "usp": "Gi·∫£i ph√°p ch√≠nh",
        "content_hook": "Hook content d√πng cho video/caption",
        "ad_visual_idea": "K·ªãch b·∫£n h√¨nh/video ng·∫Øn"
      },
            {
        "pain_point": "T√™n v·∫•n ƒë·ªÅ 2",
        "percent_of_customers": 0,
        "usp": "Gi·∫£i ph√°p ch√≠nh",
        "content_hook": "Hook content d√πng cho video/caption",
        "ad_visual_idea": "K·ªãch b·∫£n h√¨nh/video ng·∫Øn"
      },
      {
        "pain_point": "T√™n v·∫•n ƒë·ªÅ 3",
        "percent_of_customers": 0,
        "usp": "Gi·∫£i ph√°p ch√≠nh",
        "content_hook": "Hook content d√πng cho video/caption",
        "ad_visual_idea": "K·ªãch b·∫£n h√¨nh/video ng·∫Øn"
      }
    ]
  },
  {
    "name": "T√™n nh√≥m kh√°ch h√†ng 2",
    "market_share_percent": 0,
    "gender_ratio": { "male": 0, "female": 0 },
    "age_range": "xx‚Äìyy",
    "occupations": [],
    "locations": "DANH S√ÅCH C√ÅC LOCATION C·ª¶A C√ÅC T·∫¨P SEGEMENTATION THEO TARGET MARKET ƒê√É ƒê∆ØA RA",
    "purchase_frequency": "Theo m√πa / Th∆∞·ªùng xuy√™n / D·ªãp l·ªÖ",
    "average_budget_usd": 0,
    "buying_behavior": "T√¨m g√¨? Mua ·ªü ƒë√¢u? Quy·∫øt ƒë·ªãnh d·ª±a v√†o?",
    "usage_context": "D√πng ·ªü ƒë√¢u, v·ªõi ai, m·ª•c ƒë√≠ch g√¨?",
    "emotional_motivations": "C·∫£m gi√°c mong mu·ªën",
    "common_painpoints": [
      "V·∫•n ƒë·ªÅ 1",
      "V·∫•n ƒë·ªÅ 2"
    ],
    "main_channels": ["TikTok", "Facebook", "Pinterest", "Google"],
    "repurchase_or_upsell": {
      "exists": true,
      "estimated_percent": 0
    },
    "painpoint_levels": {
      "high": {
        "percent": 0,
        "description": "M√¥ t·∫£ v·∫•n ƒë·ªÅ m·ª©c ƒë·ªô cao"
      },
      "medium": {
        "percent": 0,
        "description": "M√¥ t·∫£ v·∫•n ƒë·ªÅ m·ª©c ƒë·ªô trung b√¨nh"
      },
      "low": {
        "percent": 0,
        "description": "M√¥ t·∫£ v·∫•n ƒë·ªÅ m·ª©c ƒë·ªô th·∫•p"
      }
    },
    "solutions_and_content": [
      {
        "pain_point": "T√™n v·∫•n ƒë·ªÅ",
        "percent_of_customers": 0,
        "usp": "Gi·∫£i ph√°p ch√≠nh",
        "content_hook": "Hook content d√πng cho video/caption",
        "ad_visual_idea": "K·ªãch b·∫£n h√¨nh/video ng·∫Øn"
      },
            {
        "pain_point": "T√™n v·∫•n ƒë·ªÅ 2",
        "percent_of_customers": 0,
        "usp": "Gi·∫£i ph√°p ch√≠nh",
        "content_hook": "Hook content d√πng cho video/caption",
        "ad_visual_idea": "K·ªãch b·∫£n h√¨nh/video ng·∫Øn"
      },
      {
        "pain_point": "T√™n v·∫•n ƒë·ªÅ 3",
        "percent_of_customers": 0,
        "usp": "Gi·∫£i ph√°p ch√≠nh",
        "content_hook": "Hook content d√πng cho video/caption",
        "ad_visual_idea": "K·ªãch b·∫£n h√¨nh/video ng·∫Øn"
      }
    ]
  },
  {
    "name": "T√™n nh√≥m kh√°ch h√†ng 3",
    "market_share_percent": 0,
    "gender_ratio": { "male": 0, "female": 0 },
    "age_range": "xx‚Äìyy",
    "occupations": [],
    "locations": "DANH S√ÅCH C√ÅC LOCATION C·ª¶A C√ÅC T·∫¨P SEGEMENTATION THEO TARGET MARKET ƒê√É ƒê∆ØA RA",
    "purchase_frequency": "Theo m√πa / Th∆∞·ªùng xuy√™n / D·ªãp l·ªÖ",
    "average_budget_usd": 0,
    "buying_behavior": "T√¨m g√¨? Mua ·ªü ƒë√¢u? Quy·∫øt ƒë·ªãnh d·ª±a v√†o?",
    "usage_context": "D√πng ·ªü ƒë√¢u, v·ªõi ai, m·ª•c ƒë√≠ch g√¨?",
    "emotional_motivations": "C·∫£m gi√°c mong mu·ªën",
    "common_painpoints": [
      "V·∫•n ƒë·ªÅ 1",
      "V·∫•n ƒë·ªÅ 2"
    ],
    "main_channels": ["TikTok", "Facebook", "Pinterest", "Google"],
    "repurchase_or_upsell": {
      "exists": true,
      "estimated_percent": 0
    },
    "painpoint_levels": {
      "high": {
        "percent": 0,
        "description": "M√¥ t·∫£ v·∫•n ƒë·ªÅ m·ª©c ƒë·ªô cao"
      },
      "medium": {
        "percent": 0,
        "description": "M√¥ t·∫£ v·∫•n ƒë·ªÅ m·ª©c ƒë·ªô trung b√¨nh"
      },
      "low": {
        "percent": 0,
        "description": "M√¥ t·∫£ v·∫•n ƒë·ªÅ m·ª©c ƒë·ªô th·∫•p"
      }
    },
    "solutions_and_content": [
      {
        "pain_point": "T√™n v·∫•n ƒë·ªÅ 1",
        "percent_of_customers": 0,
        "usp": "Gi·∫£i ph√°p ch√≠nh",
        "content_hook": "Hook content d√πng cho video/caption",
        "ad_visual_idea": "K·ªãch b·∫£n h√¨nh/video ng·∫Øn"
      },
      {
        "pain_point": "T√™n v·∫•n ƒë·ªÅ 2",
        "percent_of_customers": 0,
        "usp": "Gi·∫£i ph√°p ch√≠nh",
        "content_hook": "Hook content d√πng cho video/caption",
        "ad_visual_idea": "K·ªãch b·∫£n h√¨nh/video ng·∫Øn"
      },
      {
        "pain_point": "T√™n v·∫•n ƒë·ªÅ 3",
        "percent_of_customers": 0,
        "usp": "Gi·∫£i ph√°p ch√≠nh",
        "content_hook": "Hook content d√πng cho video/caption",
        "ad_visual_idea": "K·ªãch b·∫£n h√¨nh/video ng·∫Øn"
      }
    ]
  },
  {
    "name": "T√™n nh√≥m kh√°ch h√†ng 4",
    "market_share_percent": 0,
    "gender_ratio": { "male": 0, "female": 0 },
    "age_range": "xx‚Äìyy",
    "occupations": [],
    "locations": "DANH S√ÅCH C√ÅC LOCATION C·ª¶A C√ÅC T·∫¨P SEGEMENTATION THEO TARGET MARKET ƒê√É ƒê∆ØA RA",
    "purchase_frequency": "Theo m√πa / Th∆∞·ªùng xuy√™n / D·ªãp l·ªÖ",
    "average_budget_usd": 0,
    "buying_behavior": "T√¨m g√¨? Mua ·ªü ƒë√¢u? Quy·∫øt ƒë·ªãnh d·ª±a v√†o?",
    "usage_context": "D√πng ·ªü ƒë√¢u, v·ªõi ai, m·ª•c ƒë√≠ch g√¨?",
    "emotional_motivations": "C·∫£m gi√°c mong mu·ªën",
    "common_painpoints": [
      "V·∫•n ƒë·ªÅ 1",
      "V·∫•n ƒë·ªÅ 2"
    ],
    "main_channels": ["TikTok", "Facebook", "Pinterest", "Google"],
    "repurchase_or_upsell": {
      "exists": true,
      "estimated_percent": 0
    },
    "painpoint_levels": {
      "high": {
        "percent": 0,
        "description": "M√¥ t·∫£ v·∫•n ƒë·ªÅ m·ª©c ƒë·ªô cao"
      },
      "medium": {
        "percent": 0,
        "description": "M√¥ t·∫£ v·∫•n ƒë·ªÅ m·ª©c ƒë·ªô trung b√¨nh"
      },
      "low": {
        "percent": 0,
        "description": "M√¥ t·∫£ v·∫•n ƒë·ªÅ m·ª©c ƒë·ªô th·∫•p"
      }
    },
    "solutions_and_content": [
      {
        "pain_point": "T√™n v·∫•n ƒë·ªÅ 1",
        "percent_of_customers": 0,
        "usp": "Gi·∫£i ph√°p ch√≠nh",
        "content_hook": "Hook content d√πng cho video/caption",
        "ad_visual_idea": "K·ªãch b·∫£n h√¨nh/video ng·∫Øn"
      },
      {
        "pain_point": "T√™n v·∫•n ƒë·ªÅ 2",
        "percent_of_customers": 0,
        "usp": "Gi·∫£i ph√°p ch√≠nh",
        "content_hook": "Hook content d√πng cho video/caption",
        "ad_visual_idea": "K·ªãch b·∫£n h√¨nh/video ng·∫Øn"
      },
      {
        "pain_point": "T√™n v·∫•n ƒë·ªÅ 3",
        "percent_of_customers": 0,
        "usp": "Gi·∫£i ph√°p ch√≠nh",
        "content_hook": "Hook content d√πng cho video/caption",
        "ad_visual_idea": "K·ªãch b·∫£n h√¨nh/video ng·∫Øn"
      }
    ]
  },
  {
    "name": "T√™n nh√≥m kh√°ch h√†ng 5",
    "market_share_percent": 0,
    "gender_ratio": { "male": 0, "female": 0 },
    "age_range": "xx‚Äìyy",
    "occupations": [],
    "locations": "DANH S√ÅCH C√ÅC LOCATION C·ª¶A C√ÅC T·∫¨P SEGEMENTATION THEO TARGET MARKET ƒê√É ƒê∆ØA RA",
    "purchase_frequency": "Theo m√πa / Th∆∞·ªùng xuy√™n / D·ªãp l·ªÖ",
    "average_budget_usd": 0,
    "buying_behavior": "T√¨m g√¨? Mua ·ªü ƒë√¢u? Quy·∫øt ƒë·ªãnh d·ª±a v√†o?",
    "usage_context": "D√πng ·ªü ƒë√¢u, v·ªõi ai, m·ª•c ƒë√≠ch g√¨?",
    "emotional_motivations": "C·∫£m gi√°c mong mu·ªën",
    "common_painpoints": [
      "V·∫•n ƒë·ªÅ 1",
      "V·∫•n ƒë·ªÅ 2"
    ],
    "main_channels": ["TikTok", "Facebook", "Pinterest", "Google"],
    "repurchase_or_upsell": {
      "exists": true,
      "estimated_percent": 0
    },
    "painpoint_levels": {
      "high": {
        "percent": 0,
        "description": "M√¥ t·∫£ v·∫•n ƒë·ªÅ m·ª©c ƒë·ªô cao"
      },
      "medium": {
        "percent": 0,
        "description": "M√¥ t·∫£ v·∫•n ƒë·ªÅ m·ª©c ƒë·ªô trung b√¨nh"
      },
      "low": {
        "percent": 0,
        "description": "M√¥ t·∫£ v·∫•n ƒë·ªÅ m·ª©c ƒë·ªô th·∫•p"
      }
    },
    "solutions_and_content": [
      {
        "pain_point": "T√™n v·∫•n ƒë·ªÅ 1",
        "percent_of_customers": 0,
        "usp": "Gi·∫£i ph√°p ch√≠nh",
        "content_hook": "Hook content d√πng cho video/caption",
        "ad_visual_idea": "K·ªãch b·∫£n h√¨nh/video ng·∫Øn"
      },
      {
        "pain_point": "T√™n v·∫•n ƒë·ªÅ 2",
        "percent_of_customers": 0,
        "usp": "Gi·∫£i ph√°p ch√≠nh",
        "content_hook": "Hook content d√πng cho video/caption",
        "ad_visual_idea": "K·ªãch b·∫£n h√¨nh/video ng·∫Øn"
      },
      {
        "pain_point": "T√™n v·∫•n ƒë·ªÅ 3",
        "percent_of_customers": 0,
        "usp": "Gi·∫£i ph√°p ch√≠nh",
        "content_hook": "Hook content d√πng cho video/caption",
        "ad_visual_idea": "K·ªãch b·∫£n h√¨nh/video ng·∫Øn"
      }
    ]
  }
]
,
  "conclusions": [
    {
      "title": "Chi·∫øn l∆∞·ª£c 1: T·∫≠p trung v√†o nh√≥m kh√°ch h√†ng ch√≠nh",
      "focus_group_priority": "T√™n nh√≥m kh√°ch h√†ng n√™n ch·∫°y ƒë·∫ßu ti√™n",
      "best_content_angle": "Angle ti·ªÅm nƒÉng nh·∫•t",
      "upsell_combo_suggestions": "√ù t∆∞·ªüng upsell ho·∫∑c combo",
      "risks_to_consider": "Ph√°p l√Ω, m√πa v·ª•, logistics, etc."
    },
    {
      "title": "Chi·∫øn l∆∞·ª£c 2: M·ªü r·ªông th·ªã tr∆∞·ªùng m·ªõi",
      "focus_group_priority": "T√™n nh√≥m kh√°ch h√†ng n√™n ch·∫°y ƒë·∫ßu ti√™n",
      "best_content_angle": "Angle ti·ªÅm nƒÉng nh·∫•t",
      "upsell_combo_suggestions": "√ù t∆∞·ªüng upsell ho·∫∑c combo",
      "risks_to_consider": "Ph√°p l√Ω, m√πa v·ª•, logistics, etc."
    },
    {
      "title": "Chi·∫øn l∆∞·ª£c 3: T·ªëi ∆∞u h√≥a n·ªôi dung hi·ªán t·∫°i",
      "focus_group_priority": "T√™n nh√≥m kh√°ch h√†ng n√™n ch·∫°y ƒë·∫ßu ti√™n",
      "best_content_angle": "Angle ti·ªÅm nƒÉng nh·∫•t",
      "upsell_combo_suggestions": "√ù t∆∞·ªüng upsell ho·∫∑c combo",
      "risks_to_consider": "Ph√°p l√Ω, m√πa v·ª•, logistics, etc."
    }
  ]
}
}
\`\`\`

H√£y ph√¢n t√≠ch s·∫£n ph·∫©m n√†y v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ theo ƒë√∫ng c·∫•u tr√∫c JSON tr√™n.`;

  const response = await axios.post(
    'https://openrouter.ai/api/v1/chat/completions',
    {
        model: 'google/gemini-2.5-flash-preview-09-2025',
      messages: [
        {
          role: 'system',
          content: 'B·∫°n l√† chuy√™n gia ph√¢n t√≠ch th·ªã tr∆∞·ªùng v√† nh·∫≠n di·ªán s·∫£n ph·∫©m. B·∫°n c√≥ th·ªÉ ph√¢n t√≠ch h√¨nh ·∫£nh ƒë·ªÉ extract title v√† description s·∫£n ph·∫©m. Tr·∫£ v·ªÅ CH·ªà JSON h·ª£p l·ªá, kh√¥ng c√≥ text th√™m, kh√¥ng c√≥ markdown formatting.'
        },
        {
          role: 'user',
          content: prompt,
        },
      ],
      temperature: 0.7,
      max_tokens: 8000,
    },
    {
      headers: {
        'Authorization': `Bearer ${openRouterApiKey}`,
        'Content-Type': 'application/json',
        'HTTP-Referer': 'http://localhost:3000',
        'X-Title': 'Product Analysis Aff',
      },
    }
  );

  const content = response.data.choices[0].message.content;
  
  try {
    // Try to find complete JSON object
    let jsonStart = content.indexOf('{');
    if (jsonStart === -1) {
      return { raw_analysis: content };
    }
    
    // Find matching closing brace
    let braceCount = 0;
    let jsonEnd = -1;
    for (let i = jsonStart; i < content.length; i++) {
      if (content[i] === '{') braceCount++;
      if (content[i] === '}') braceCount--;
      if (braceCount === 0) {
        jsonEnd = i;
        break;
      }
    }
    
    if (jsonEnd === -1) {
      console.warn('Incomplete JSON found, using raw content');
      return { raw_analysis: content };
    }
    
    const jsonString = content.substring(jsonStart, jsonEnd + 1);
    return JSON.parse(jsonString);
  } catch (parseError) {
    console.error('Error parsing AI response:', parseError);
    console.error('Content length:', content.length);
    console.error('Content preview:', content.substring(0, 500));
    return { raw_analysis: content };
  }
}

export default router;