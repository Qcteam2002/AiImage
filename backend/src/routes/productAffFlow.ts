import express, { Request, Response } from 'express';
import { prisma } from '../database/client';
import { authenticate, AuthenticatedRequest } from '../middleware/auth';
import axios from 'axios';

const router = express.Router();

// Get all products
router.get('/', authenticate,   async (req: Request, res: Response) => {
    try {
      const authenticatedReq = req as AuthenticatedRequest;
    console.log('üîç [ProductAff] GET / - Fetching products');
    const { search, status, limit = 50, offset = 0 } = req.query;
    const userId = authenticatedReq.user?.id;

    if (!userId) {
      console.log('‚ùå [ProductAff] GET / - Unauthorized: No userId');
      return res.status(401).json({ message: 'Unauthorized' });
    }

    const where: any = {
      userId: userId,
    };

    if (search) {
      where.OR = [
        { title: { contains: search as string, mode: 'insensitive' } },
        { description: { contains: search as string, mode: 'insensitive' } },
        { target_market: { contains: search as string, mode: 'insensitive' } },
      ];
    }

    if (status) {
      where.status = status;
    }

    const [products, total] = await Promise.all([
      prisma.productAff.findMany({
        where,
        orderBy: { created_at: 'desc' },
        take: Number(limit),
        skip: Number(offset),
      }),
      prisma.productAff.count({ where }),
    ]);

    res.json({
      products,
      total,
      limit: Number(limit),
      offset: Number(offset),
    });
  } catch (error) {
    console.error('Error fetching products:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// Get single product
router.get('/:id', authenticate,   async (req: Request, res: Response) => {
    try {
      const authenticatedReq = req as AuthenticatedRequest;
    const { id } = req.params;
    const userId = authenticatedReq.user?.id;

    if (!userId) {
      return res.status(401).json({ message: 'Unauthorized' });
    }

    const product = await prisma.productAff.findFirst({
      where: {
        id: id,
        userId: userId,
      },
    });

    if (!product) {
      return res.status(404).json({ message: 'Product not found' });
    }

    res.json(product);
  } catch (error) {
    console.error('Error fetching product:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// Create new product
router.post('/', authenticate,   async (req: Request, res: Response) => {
    try {
      const authenticatedReq = req as AuthenticatedRequest;
    console.log('‚ûï [ProductAff] POST / - Creating new product');
    const { target_market, image1, image2, title, description, language = 'vi', segmentation_number = 3 } = req.body;
    const userId = authenticatedReq.user?.id;

    if (!userId) {
      console.log('‚ùå [ProductAff] POST / - Unauthorized: No userId');
      return res.status(401).json({ message: 'Unauthorized' });
    }

    if (!target_market || !image1) {
      return res.status(400).json({ message: 'Target market and image1 are required' });
    }

    const product = await prisma.productAff.create({
      data: {
        target_market,
        image1,
        image2,
        title,
        description,
        language,
        segmentation_number,
        status: 'waiting',
        userId: userId,
      },
    });

    res.status(201).json(product);
  } catch (error) {
    console.error('Error creating product:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// Update product
router.put('/:id', authenticate, async (req: Request, res: Response) => {
  try {
    const authenticatedReq = req as AuthenticatedRequest;
    console.log('‚úèÔ∏è [ProductAff] PUT /:id - Updating product');
    const { id } = req.params;
    const { target_market, image1, image2, title, description } = req.body;
    const userId = authenticatedReq.user?.id;

    if (!userId) {
      console.log('‚ùå [ProductAff] PUT /:id - Unauthorized: No userId');
      return res.status(401).json({ message: 'Unauthorized' });
    }

    // Check if product exists and belongs to user
    const existingProduct = await prisma.productAff.findFirst({
      where: {
        id: id,
        userId: userId,
      },
    });

    if (!existingProduct) {
      console.log('‚ùå [ProductAff] PUT /:id - Product not found:', id);
      return res.status(404).json({ message: 'Product not found' });
    }

    // Only allow updating if status is not processing
    if (existingProduct.status === 'processing') {
      return res.status(400).json({ message: 'Cannot update product while analysis is in progress' });
    }

    const updateData: any = {};
    if (target_market !== undefined) updateData.target_market = target_market;
    if (image1 !== undefined) updateData.image1 = image1;
    if (image2 !== undefined) updateData.image2 = image2;
    if (title !== undefined) updateData.title = title;
    if (description !== undefined) updateData.description = description;

    const updatedProduct = await prisma.productAff.update({
      where: { id: id },
      data: updateData,
    });

    console.log('‚úÖ [ProductAff] PUT /:id - Product updated successfully');
    res.json(updatedProduct);
  } catch (error) {
    console.error('Error updating product:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// Analyze product
router.post('/:id/analyze', authenticate,   async (req: Request, res: Response) => {
    try {
      const authenticatedReq = req as AuthenticatedRequest;
    console.log('ü§ñ [ProductAff] POST /:id/analyze - Starting analysis');
    const { id } = req.params;
    const userId = authenticatedReq.user?.id;

    if (!userId) {
      console.log('‚ùå [ProductAff] POST /:id/analyze - Unauthorized: No userId');
      return res.status(401).json({ message: 'Unauthorized' });
    }

    const product = await prisma.productAff.findFirst({
      where: {
        id: id,
        userId: userId,
      },
    });

    if (!product) {
      console.log('‚ùå [ProductAff] POST /:id/analyze - Product not found:', id);
      return res.status(404).json({ message: 'Product not found' });
    }

    // Check if user has enough credits
    const user = await prisma.user.findUnique({
      where: { id: userId },
      select: { credits: true }
    });

    if (!user) {
      console.log('‚ùå [ProductAff] POST /:id/analyze - User not found:', userId);
      return res.status(404).json({ message: 'User not found' });
    }

    if (user.credits < 1) {
      console.log('‚ùå [ProductAff] POST /:id/analyze - Insufficient credits:', user.credits);
      return res.status(400).json({ 
        message: 'Insufficient credits. You need at least 1 credit to analyze a product.',
        credits: user.credits
      });
    }

    console.log('üìù [ProductAff] POST /:id/analyze - Product found:', {
      id: product.id,
      target_market: product.target_market,
      title: product.title
    });
    console.log('üí∞ [ProductAff] POST /:id/analyze - User credits:', user.credits);

    // Update status to processing
    await prisma.productAff.update({
      where: { id: id },
      data: { status: 'processing' },
    });
    console.log('üîÑ [ProductAff] POST /:id/analyze - Status updated to processing');

    try {
      console.log('üöÄ [ProductAff] POST /:id/analyze - Calling OpenRouter API');
      // Get current date for AI context
      const currentDate = new Date().toLocaleDateString('vi-VN', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
      console.log('üìÖ [ProductAff] POST /:id/analyze - Current date:', currentDate);
      
      // Call OpenRouter API for analysis with current date
      const analysisResult = await analyzeProductWithAI(product, product.language || 'vi', product.segmentation_number || 3, currentDate);
      console.log('‚úÖ [ProductAff] POST /:id/analyze - AI analysis completed');
      
      // Update product with analysis result and deduct credit
      const updatedProduct = await prisma.$transaction(async (tx) => {
        // Update product status
        const updatedProduct = await tx.productAff.update({
        where: { id: id },
        data: {
          status: 'done',
          analysis_result: JSON.stringify(analysisResult),
          analyzed_at: new Date(),
        },
        });

        // Deduct 1 credit from user
        const updatedUser = await tx.user.update({
          where: { id: userId },
          data: {
            credits: {
              decrement: 1
            }
          },
          select: {
            id: true,
            email: true,
            credits: true
          }
        });

        console.log(`üí∞ [ProductAff] POST /:id/analyze - Credit deducted. User ${userId} now has ${updatedUser.credits} credits`);
        
        return updatedProduct;
      });

      res.json(updatedProduct);
    } catch (aiError) {
      console.error('AI Analysis error:', aiError);
      
      // Update status to error
      await prisma.productAff.update({
        where: { id: id },
        data: { status: 'error' },
      });

      res.status(500).json({ message: 'AI analysis failed' });
    }
  } catch (error) {
    console.error('Error analyzing product:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// Delete product
router.delete('/:id', authenticate,   async (req: Request, res: Response) => {
    try {
      const authenticatedReq = req as AuthenticatedRequest;
    const { id } = req.params;
    const userId = authenticatedReq.user?.id;

    if (!userId) {
      return res.status(401).json({ message: 'Unauthorized' });
    }

    const product = await prisma.productAff.findFirst({
      where: {
        id: id,
        userId: userId,
      },
    });

    if (!product) {
      return res.status(404).json({ message: 'Product not found' });
    }

    await prisma.productAff.delete({
      where: { id: id },
    });

    res.status(204).send();
  } catch (error) {
    console.error('Error deleting product:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// AI Analysis function
async function analyzeProductWithAI(product: any, language: string = 'vi', segmentationNumber: number = 3, currentDate?: string) {
  const openRouterApiKey = process.env.OPENROUTER_API_KEY;
  
  if (!openRouterApiKey) {
    throw new Error('OpenRouter API key not configured');
  }

  // Language configuration
  const isVietnamese = language === 'vi';
  const languageConfig = {
    vi: {
      title: "Ph√¢n t√≠ch s·∫£n ph·∫©m",
      context: "T√¥i ƒëang nghi√™n c·ª©u v√† ƒë√°nh gi√° ti·ªÅm nƒÉng kinh doanh c·ªßa m·ªôt s·∫£n ph·∫©m theo h√¨nh th·ª©c **dropship ho·∫∑c affiliate**. T√¥i c·∫ßn m·ªôt b·∫£n ph√¢n t√≠ch th·ªã tr∆∞·ªùng chi ti·∫øt, c√≥ c·∫•u tr√∫c logic, insight r√µ r√†ng, ƒë·ªÉ:",
      goals: [
        "X√°c ƒë·ªãnh kh·∫£ nƒÉng b√°n h√†ng c·ªßa s·∫£n ph·∫©m",
        "Hi·ªÉu kh√°ch h√†ng m·ª•c ti√™u ƒë·ªß s√¢u ƒë·ªÉ ch·ªçn k√™nh, angle, c√°ch l√†m content",
        "Thi·∫øt k·∫ø c√°c n·ªôi dung truy·ªÅn th√¥ng hi·ªáu qu·∫£ (video, ads, caption‚Ä¶)"
      ],
      role: "B·∫°n l√† chuy√™n gia ph√¢n t√≠ch th·ªã tr∆∞·ªùng, h√†nh vi kh√°ch h√†ng v√† chi·∫øn l∆∞·ª£c n·ªôi dung th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠.",
      instruction: "B·∫°n kh√¥ng c·∫ßn l√†m s·∫£n ph·∫©m, ch·ªâ c·∫ßn gi√∫p t√¥i *b√°n s·∫£n ph·∫©m ng∆∞·ªùi kh√°c l√†m* th√¥ng qua **content hi·ªáu qu·∫£ & insight ƒë√∫ng**.",
      requirement: "Khi t√¥i g·ª≠i t√™n s·∫£n ph·∫©m + h√¨nh ·∫£nh, th√¨ b·∫°n c·∫ßn ph·∫£i t√¨m ki·∫øm c√°c ngu·ªìn website uy t√≠nh v√† sau ƒë√≥ b·∫°n c·∫ßn tr·∫£ v·ªÅ ƒë·∫ßy ƒë·ªß c√°c ph·∫ßn sau, y√™u c·∫ßu t·∫•t c·∫£ c·∫ßn ph·∫£i c√≥ s·ªë li·ªáu ch·ª©ng minh, data r√µ r√†ng:"
    },
    en: {
      title: "Product Analysis",
      context: "I am researching and evaluating the business potential of a product through **dropship or affiliate** model. I need a detailed market analysis with logical structure and clear insights to:",
      goals: [
        "Determine the product's sales potential",
        "Understand target customers deeply enough to choose channels, angles, and content strategies",
        "Design effective communication content (videos, ads, captions...)"
      ],
      role: "You are a market analysis expert, customer behavior and e-commerce content strategy specialist.",
      instruction: "You don't need to make products, just help me *sell other people's products* through **effective content & correct insights**.",
      requirement: "When I send product name + images, you need to search reliable websites and then return all the following sections, requiring all to have supporting data and clear evidence:"
    }
  };

  const config = languageConfig[language as keyof typeof languageConfig] || languageConfig.vi;

  // Generate dynamic JSON template based on language
  const generateJsonTemplate = (isVietnamese: boolean) => {
    if (isVietnamese) {
      return `{
  "executive_summary": {
    "recommendation": "G·ª£i √Ω c√≥ n√™n b√°n hay kh√¥ng v√† t·∫°i sao",
    "key_points": [
      "Lu·∫≠n ƒëi·ªÉm 1",
      "Lu·∫≠n ƒëi·ªÉm 2", 
      "Lu·∫≠n ƒëi·ªÉm 3",
      "Lu·∫≠n ƒëi·ªÉm 4 (n·∫øu c√≥)"
    ],
    "biggest_opportunity": "N·ªôi dung c∆° h·ªôi (chi ti·∫øt v√¨ sao ƒë√¢y l√† c∆° h·ªôi l·ªõn c√†ng chi ti·∫øt c√†ng t·ªët)",
    "biggest_risk": "N·ªôi dung r·ªßi ro (c√≥ s√¥ li·ªáu c·ª• th·ªÉ c√†ng chi ti√™t c√†ng t·ªët, v√≠ d·ª• t·∫°o sao c√≥ r·ªßi ro ƒë√≥ bao nhi√™u %)"
  },
  "market_and_keywords": {
    "sales_potential": "Cao / Trung b√¨nh / Th·∫•p",
    "market_size_usd": 0,
    "cagr_percent": 0,
    "google_trends_change_percent": 0,
    "marketplace_data": {
      "aliexpress": {
        "listings": 0,
        "sales_per_month": 0,
        "growth_percent": null
      },
      "etsy": {
        "listings": 0,
        "sales_per_month": 0,
        "growth_percent": null
      },
      "amazon": {
        "listings": 0,
        "sales_per_month": 0,
        "growth_percent": null
      },
      "shopee": {
        "listings": 0,
        "sales_per_month": 0,
        "growth_percent": null
      }
    },
    "keywords": {
      "informational": [
        { "keyword": "", "volume": 0, "cpc": 0, "competition": "" }
      ],
      "transactional": [
        { "keyword": "", "volume": 0, "cpc": 0, "competition": "" }
      ],
      "comparative": [
        { "keyword": "", "volume": 0, "cpc": 0, "competition": "" }
      ],
      "painpoint_related": [
        { "keyword": "", "volume": 0, "cpc": 0, "competition": "" }
      ]
    },
    "sources": ["Statista", "GVR", "Marketplace Pulse", "TikTok Trends"]
  },
  "product_problems": {
    "resolved": [
      { "problem": "V·∫•n ƒë·ªÅ", "satisfaction_percent": 0 }
    ],
    "unresolved": [
      {
        "problem": "V·∫•n ƒë·ªÅ",
        "unsatisfied_percent": 0,
        "example_feedback": "Tr√≠ch d·∫´n review n·∫øu c√≥"
      }
    ]
  }`;
    } else {
      return `{
  "executive_summary": {
    "recommendation": "Recommendation on whether to sell or not and why",
    "key_points": [
      "Key point 1",
      "Key point 2", 
      "Key point 3",
      "Key point 4 (if any)"
    ],
    "biggest_opportunity": "Opportunity content (detailed why this is a big opportunity, the more detailed the better)",
    "biggest_risk": "Risk content (with specific data, the more detailed the better, e.g. why this risk exists, what percentage)"
  },
  "market_and_keywords": {
    "sales_potential": "High / Medium / Low",
    "market_size_usd": 0,
    "cagr_percent": 0,
    "google_trends_change_percent": 0,
    "marketplace_data": {
      "aliexpress": {
        "listings": 0,
        "sales_per_month": 0,
        "growth_percent": null
      },
      "etsy": {
        "listings": 0,
        "sales_per_month": 0,
        "growth_percent": null
      },
      "amazon": {
        "listings": 0,
        "sales_per_month": 0,
        "growth_percent": null
      },
      "shopee": {
        "listings": 0,
        "sales_per_month": 0,
        "growth_percent": null
      }
    },
    "keywords": {
      "informational": [
        { "keyword": "", "volume": 0, "cpc": 0, "competition": "" }
      ],
      "transactional": [
        { "keyword": "", "volume": 0, "cpc": 0, "competition": "" }
      ],
      "comparative": [
        { "keyword": "", "volume": 0, "cpc": 0, "competition": "" }
      ],
      "painpoint_related": [
        { "keyword": "", "volume": 0, "cpc": 0, "competition": "" }
      ]
    },
    "sources": ["Statista", "GVR", "Marketplace Pulse", "TikTok Trends"]
  },
  "product_problems": {
    "resolved": [
      { "problem": "Problem", "satisfaction_percent": 0 }
    ],
    "unresolved": [
      {
        "problem": "Problem",
        "unsatisfied_percent": 0,
        "example_feedback": "Quote review if available"
      }
    ]
  }`;
    }
  };

  // Generate dynamic target_customers template
  const generateTargetCustomersTemplate = (count: number, isVietnamese: boolean) => {
    const template = [];
    for (let i = 1; i <= count; i++) {
      template.push(`  {
    "name": "${isVietnamese ? 'T√™n nh√≥m kh√°ch h√†ng' : 'Customer Group'} ${i}",
    "market_share_percent": 0,
    "gender_ratio": { "male": 0, "female": 0 },
    "age_range": "xx‚Äìyy",
    "occupations": [],
    "locations": ["${isVietnamese ? 'Th√†nh ph·ªë 1' : 'City 1'}", "${isVietnamese ? 'Th√†nh ph·ªë 2' : 'City 2'}", "${isVietnamese ? 'Th√†nh ph·ªë 3' : 'City 3'}"],
    "purchase_frequency": "${isVietnamese ? 'Theo m√πa / Th∆∞·ªùng xuy√™n / D·ªãp l·ªÖ' : 'Seasonal / Regular / Holiday'}",
    "average_budget_usd": 0,
    "buying_behavior": "${isVietnamese ? 'T√¨m g√¨? Mua ·ªü ƒë√¢u? Quy·∫øt ƒë·ªãnh d·ª±a v√†o?' : 'What do they search? Where do they buy? What influences decisions?'}",
    "usage_context": "${isVietnamese ? 'D√πng ·ªü ƒë√¢u, v·ªõi ai, m·ª•c ƒë√≠ch g√¨?' : 'Where do they use it, with whom, for what purpose?'}",
    "emotional_motivations": "${isVietnamese ? 'C·∫£m gi√°c mong mu·ªën' : 'Desired feelings'}",
    "common_painpoints": [
      "${isVietnamese ? 'V·∫•n ƒë·ªÅ 1' : 'Problem 1'}",
      "${isVietnamese ? 'V·∫•n ƒë·ªÅ 2' : 'Problem 2'}"
    ],
    "main_channels": ["TikTok", "Facebook", "Pinterest", "Google"],
    "repurchase_or_upsell": {
      "exists": true,
      "estimated_percent": 0
    },
    "painpoint_levels": {
      "high": {
        "percent": 0,
        "description": "${isVietnamese ? 'M√¥ t·∫£ v·∫•n ƒë·ªÅ m·ª©c ƒë·ªô cao' : 'High-level problem description'}"
      },
      "medium": {
        "percent": 0,
        "description": "${isVietnamese ? 'M√¥ t·∫£ v·∫•n ƒë·ªÅ m·ª©c ƒë·ªô trung b√¨nh' : 'Medium-level problem description'}"
      },
      "low": {
        "percent": 0,
        "description": "${isVietnamese ? 'M√¥ t·∫£ v·∫•n ƒë·ªÅ m·ª©c ƒë·ªô th·∫•p' : 'Low-level problem description'}"
      }
    },
    "solutions_and_content": [
      {
        "pain_point": "${isVietnamese ? 'T√™n v·∫•n ƒë·ªÅ' : 'Problem name'} 1",
        "percent_of_customers": 0,
        "usp": "${isVietnamese ? 'Gi·∫£i ph√°p ch√≠nh' : 'Main solution'}",
        "content_hook": "${isVietnamese ? 'Hook content d√πng cho video/caption' : 'Content hook for video/caption'}",
        "ad_visual_idea": "${isVietnamese ? 'K·ªãch b·∫£n h√¨nh/video ng·∫Øn' : 'Short visual/video script'}"
      },
      {
        "pain_point": "${isVietnamese ? 'T√™n v·∫•n ƒë·ªÅ' : 'Problem name'} 2",
        "percent_of_customers": 0,
        "usp": "${isVietnamese ? 'Gi·∫£i ph√°p ch√≠nh' : 'Main solution'}",
        "content_hook": "${isVietnamese ? 'Hook content d√πng cho video/caption' : 'Content hook for video/caption'}",
        "ad_visual_idea": "${isVietnamese ? 'K·ªãch b·∫£n h√¨nh/video ng·∫Øn' : 'Short visual/video script'}"
      },
      {
        "pain_point": "${isVietnamese ? 'T√™n v·∫•n ƒë·ªÅ' : 'Problem name'} 3",
        "percent_of_customers": 0,
        "usp": "${isVietnamese ? 'Gi·∫£i ph√°p ch√≠nh' : 'Main solution'}",
        "content_hook": "${isVietnamese ? 'Hook content d√πng cho video/caption' : 'Content hook for video/caption'}",
        "ad_visual_idea": "${isVietnamese ? 'K·ªãch b·∫£n h√¨nh/video ng·∫Øn' : 'Short visual/video script'}"
      }
    ]
  }`);
    }
    return template.join(',\n');
  };

  const prompt = `# ${config.title}

# ‚úÖ üìå COMPLETE PROMPT FOR PRODUCT ANALYSIS (With Data)

*(Optimized version for Dropship / Affiliate ‚Äì DATA VERSION + EXPANDED CUSTOMER SEGMENTATION)*

---

## üéØ **Context**

${config.context}

${config.goals.map(goal => `- ${goal}`).join('\n')}

---

## üß† **Your Role**

${config.role}

${config.instruction}

## üìù **${config.requirement}

---

---

### **0. Executive Summary**

ƒê·ªÅ xu·∫•t: [N√™n / Kh√¥ng n√™n / N√™n nh∆∞ng c√≥ ƒëi·ªÅu ki·ªán] ‚Äî t√≥m t·∫Øt 1‚Äì2 c√¢u v√¨ sao.

ƒêi·ªÅu ki·ªán tri·ªÉn khai (n·∫øu c√≥): k√™nh ∆∞u ti√™n, nh√≥m kh√°ch h√†ng, ng√¢n s√°ch test.

KPI t·ªëi thi·ªÉu: Gross margin ‚â• __%, CPA/CAC ‚â§ __, BEP ‚â§ __ ƒë∆°n/th√°ng.

M·ª©c t·ª± tin: __%.

3‚Äì4 lu·∫≠n ƒëi·ªÉm then ch·ªët, sau ƒë√≥ xu·ªëng d√≤ng m√¥ t·∫£ chi ti·∫øt t·ª´ng lu·∫≠n ƒëi·ªÉm v√† s·ªë li·ªáu k√®m theo ƒë·ªÉ c≈©ng c·ªë

Nhu c·∫ßu & Xu h∆∞·ªõng: Google Trends 12m = __%, SV = __; Ngu·ªìn: __. ‚Üí T√°c ƒë·ªông: __.

C·∫°nh tranh & Gi√°: #listing = __, price range = __, top-3 share = __%; Ngu·ªìn: __. ‚Üí T√°c ƒë·ªông: __.

Chi ph√≠ ti·∫øp c·∫≠n: CPC/CPA benchmark = /; CR = __%; Ngu·ªìn: __. ‚Üí T√°c ƒë·ªông: __.

Bi√™n l·ª£i nhu·∫≠n & v·∫≠n h√†nh: Gi√° v·ªën = __, ph√≠ s√†n/ship = __, margin g·ªôp = __%; Ngu·ªìn: __. ‚Üí T√°c ƒë·ªông: __.

C∆° h·ªôi l·ªõn nh·∫•t chi ti·∫øt t·∫°i sao ƒë√¢y l√† c∆° h·ªôi l·ªõn, c√≥ kh·∫£ nƒÉng win bao nhi√™u % d·ª±a tr√™n s·ªë li·ªáu search web

M√¥ t·∫£: __ (ƒë√≤n b·∫©y: k√™nh/angle/USP).

Win-rate ∆∞·ªõc t√≠nh: __%.

Ch·ªâ s·ªë ki·ªÉm ch·ª©ng: SV = __, CTR = __%, CR = __%, CPC = __; Ngu·ªìn: __.

K·∫ø ho·∫°ch t·∫≠n d·ª•ng nhanh: b∆∞·ªõc 1 __ ‚Üí b∆∞·ªõc 2 __ ‚Üí b∆∞·ªõc 3 __.

R·ªßi ro l·ªõn nh·∫•t chi ti·∫øt t·∫°i sao ƒë√¢y l√† r·ªßi ro l·ªõn, data n√†o d·ªØ li·ªáu n√†o ƒë·ªÉ ƒë√∫c k·∫øt ƒë∆∞·ª£c v·∫•n ƒë·ªÅ n√†y

M√¥ t·∫£: __ (ph√°p l√Ω/trend/logistics/copycat‚Ä¶).

X√°c su·∫•t x·∫£y ra: __% & M·ª©c t√°c ƒë·ªông: __ (doanh thu/margin).

D·∫•u hi·ªáu c·∫£nh b√°o s·ªõm: __ (v√≠ d·ª• CPC tƒÉng >__%, report DMCA __%).

B·∫±ng ch·ª©ng d·ªØ li·ªáu: metric = __, gi√° tr·ªã = __; Ngu·ªìn: __.

Bi·ªán ph√°p gi·∫£m thi·ªÉu: __ (ph∆∞∆°ng √°n B/C, thay angle, ƒë·ªïi k√™nh, ƒëa d·∫°ng m·∫´u‚Ä¶).

---

## 1. Ti·ªÅm NƒÉng B√°n H√†ng & T·ª´ Kh√≥a

**Kh·∫£ nƒÉng b√°n h√†ng**

- ƒê√°nh gi√°: Cho ƒë√°nh gi√° ƒë√∫ng nh·∫•t v√† s·ªë li·ªáu theo ƒë√°nh gi√° th·∫ø n√†o
- Quy m√¥ th·ªã tr∆∞·ªùng: ‚Ä¶ USD (nƒÉm g·∫ßn nh·∫•t), CAGR ‚Ä¶% (giai ƒëo·∫°n 3‚Äì5 nƒÉm g·∫ßn nh·∫•t).
- Xu h∆∞·ªõng Google Trends: tƒÉng/gi·∫£m ‚Ä¶% trong 12 th√°ng.
- D·ªØ li·ªáu TMƒêT 3 th√°ng g·∫ßn ƒë√¢y nh·∫•t (Amazon, Shopee, Etsy, AliExpress):
    - S·ªë l∆∞·ª£ng listing
    - S·∫£n ph·∫©m b√°n/th√°ng (∆∞·ªõc t√≠nh)
    - M·ª©c tƒÉng tr∆∞·ªüng % so v·ªõi c√πng k·ª≥ (3 th√°ng tr∆∞·ªõc ƒë√≥)
- **Ngu·ªìn tham kh·∫£o:** Statista, Grand View Research, Marketplace Insights, v.v.Statista, GVR, Ahrefs, Marketplace Pulse, TikTok Trends‚Ä¶

**20 t·ª´ kh√≥a hi·ªáu qu·∫£ nh·∫•t c√≥ th·ªÉ d√πng ƒë·ªÉ ch·∫°y** (chia 4 nh√≥m, m·ªói t·ª´ kh√≥a c√≥ Search Volume, CPC, Competition):

1. **Th√¥ng tin** (v√≠ d·ª•: what is‚Ä¶, how to use‚Ä¶)
2. **Mua h√†ng** (buy, price, sale‚Ä¶)
3. **So s√°nh** (vs, best, top 10‚Ä¶)
4. **Li√™n quan ƒë·∫øn v·∫•n ƒë·ªÅ** (painpoint keyword‚Ä¶)

M·ªói nh√≥m 4-8 t·ª´ kh√≥a, li·ªát k√™ t·ª´ cao ‚Üí th·∫•p.

## 2. V·∫•n ƒê·ªÅ S·∫£n Ph·∫©m Gi·∫£i Quy·∫øt

- **V·∫•n ƒë·ªÅ ƒë√£ ƒë∆∞·ª£c gi·∫£i quy·∫øt t·ªët:**
    - Li·ªát k√™ k√®m % kh√°ch h√†ng h√†i l√≤ng v√† t·∫°i sao h√†i l√≤ng s·ªë li·ªáu chi ti·∫øt n·∫øu c√≥. (t·ª´ survey/review marketplace).
- **V·∫•n ƒë·ªÅ ch∆∞a ƒë∆∞·ª£c gi·∫£i quy·∫øt t·ªët (C∆° h·ªôi c·∫£i ti·∫øn):**
    - Li·ªát k√™ k√®m % kh√°ch h√†ng ch∆∞a ƒë∆∞·ª£c serve t·ªët ·ªü nh·ªØng v·∫•n ƒë·ªÅ n√†y ho·∫∑c nhu c·∫ßu ch∆∞a ƒë√°p ·ª©ng
    - Tr√≠ch d·∫´n feedback th·ª±c t·∫ø t·ª´ review (Amazon/Etsy/Reddit‚Ä¶) n·∫øu c√≥.

### **3. Ph√¢n T√≠ch 5 Nh√≥m Kh√°ch H√†ng M·ª•c Ti√™u (B·∫¢N M·ªû R·ªòNG)**

### M·ªói nh√≥m c·∫ßn ph√¢n t√≠ch ƒë·∫ßy ƒë·ªß b·∫£ng sau:

**QUAN TR·ªåNG:** V·ªõi m·ªói nh√≥m kh√°ch h√†ng, h√£y li·ªát k√™ c·ª• th·ªÉ c√°c th√†nh ph·ªë/t·ªânh m√† nh√≥m ƒë√≥ t·∫≠p trung sinh s·ªëng (v√≠ d·ª•: H√† N·ªôi, TP.HCM, ƒê√† N·∫µng, C·∫ßn Th∆°, H·∫£i Ph√≤ng...). Kh√¥ng d√πng placeholder text.

### üßë‚Äçü§ù‚Äçüßë **Nh√≥m X: [T√™n nh√≥m kh√°ch h√†ng]**

| **H·∫°ng m·ª•c** | **N·ªôi dung c·ª• th·ªÉ** |
| --- | --- |
| Ph√¢n kh√∫c th·ªã ph·∫ßn | % ∆∞·ªõc t√≠nh nh√≥m n√†y chi·∫øm |
| Gi·ªõi t√≠nh | % Nam / N·ªØ |
| ƒê·ªô tu·ªïi ch√≠nh | Kho·∫£ng tu·ªïi ch√≠nh, % ph√¢n b·ªï |
| Ngh·ªÅ nghi·ªáp ph·ªï bi·∫øn | VƒÉn ph√≤ng, n·ªôi tr·ª£, h·ªçc sinh, freelancer‚Ä¶ |
| V·ªã tr√≠ ƒë·ªãa l√Ω ch√≠nh | Li·ªát k√™ c√°c th√†nh ph·ªë/t·ªânh c·ª• th·ªÉ (v√≠ d·ª•: H√† N·ªôi, TP.HCM, ƒê√† N·∫µng, C·∫ßn Th∆°...) |
| T·∫ßn su·∫•t mua h√†ng | Theo m√πa / h√†ng th√°ng / d·ªãp l·ªÖ |
| Ng√¢n s√°ch trung b√¨nh | $ / m·ªói ƒë∆°n ho·∫∑c m·ªói nƒÉm |
| H√†nh vi t√¨m ki·∫øm & mua | H·ªç t√¨m g√¨, mua ·ªü ƒë√¢u, ra quy·∫øt ƒë·ªãnh theo y·∫øu t·ªë n√†o |
| Ng·ªØ c·∫£nh s·ª≠ d·ª•ng | Mua ƒë·ªÉ l√†m g√¨? D√πng ·ªü ƒë√¢u? V·ªõi ai? |
| ƒê·ªông l·ª±c c·∫£m x√∫c ch√≠nh | C·∫£m gi√°c mong mu·ªën sau khi mua (v√≠ d·ª•: b√© vui, m·∫π an t√¢m‚Ä¶) |
| Pain Points th∆∞·ªùng g·∫∑p | Li·ªát k√™ 3‚Äì5 v·∫•n ƒë·ªÅ ch√≠nh |
| K√™nh ti·∫øp c·∫≠n hi·ªáu qu·∫£ | TikTok, Facebook, Google, Shopee‚Ä¶ |
| T·ª∑ l·ªá t√°i mua / upsell | C√≥ / Kh√¥ng, % ∆∞·ªõc t√≠nh |
| T·ª∑ l·ªá t√°i mua / upsell | C√≥ / Kh√¥ng, % ∆∞·ªõc t√≠nh |

---

### **ƒê√°nh gi√° Pain Points theo m·ª©c ƒë·ªô**

- **CAO:** ‚Ä¶ (% kh√°ch h√†ng)
- **TRUNG B√åNH:** ‚Ä¶ (% kh√°ch h√†ng)
- **TH·∫§P:** ‚Ä¶ (% kh√°ch h√†ng)

---

### **B·∫£ng ƒë√°nh gi√° Pain Points theo m·ª©c ƒë·ªô v√† gi·∫£i ph√°p ƒë·ªÅ xu·∫•t (chu·∫©n c·∫•u tr√∫c m·ªõi)**

| **Pain Point** | **Gi·∫£i ph√°p (USP)** | **G·ª£i √Ω n·ªôi dung / content hook** | **G·ª£i √Ω Video / H√¨nh ·∫£nh Qu·∫£ng C√°o (n·∫øu c√≥)** |
| --- | --- | --- | --- |
| [V·∫•n ƒë·ªÅ c·ª• th·ªÉ ph·∫£i th·∫≠t chi ti·∫øt l√† kh√°ch h√†ng ƒëang b·ªã g√¨, b·ªã th·∫ø n√†o] (% kh√°ch h√†ng b·ªã) | [USP ƒë·ªÉ gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ c·ªßa kh√°ch l√† g√¨, d·ªÖ hi·ªÉu, ƒë√∫ng insight] | [C√¢u n√≥i/d√≤ng text d√πng l√†m content m·ªü ƒë·∫ßu, ti√™u ƒë·ªÅ, caption‚Ä¶ c·∫ßn ph·∫£i chi ti·∫øt hay v√† n√™n l√†m sao ch·ª© ko ghi chung chung] | [K·ªãch b·∫£n video ng·∫Øn kho·∫£ng 20s v√† chia ra t·ª´ng khung th·ªùi gian c·ª• th·ªÉ th·∫≠t chi ti·∫øt ƒë·ªÉ t·∫°o content cho c√°c k√™nh social nh∆∞ tiktok ho·∫∑c instagram] |

üìå L·∫∑p l·∫°i b·∫£ng n√†y ƒë·∫ßy ƒë·ªß ƒë√∫ng v·ªõi b·∫£ng tr√™n cho **t·ª´ng nh√≥m kh√°ch h√†ng m·ª•c ti√™u** (3 nh√≥m)


---

### **üîö K·∫øt lu·∫≠n:**

- Nh√≥m n√†o n√™n t·∫≠p trung tr∆∞·ªõc khi ch·∫°y content?
- Angle n√†o ti·ªÅm nƒÉng nh·∫•t ƒë·ªÉ ch·∫°y ads / organic post?
- C√≥ th·ªÉ upsell / k·∫øt h·ª£p combo g√¨?
- C√≥ r·ªßi ro g√¨ c·∫ßn l∆∞u √Ω khi b√°n s·∫£n ph·∫©m n√†y (v·ªÅ ph√°p l√Ω, th·ªã tr∆∞·ªùng, ngu·ªìn h√†ng‚Ä¶)?

t∆∞∆°ng t·ª± cho c√°c nh√≥m c√≤n l·∫°i, hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß ra, v√≠ d·ª• co 3 nh√≥m th√¨ m·ªói nh√≥m n√™n c√≥ ƒë·∫ßy ƒë·ªß k·∫øt lu·∫≠n

---

## üìä **Th√¥ng tin s·∫£n ph·∫©m c·∫ßn ph√¢n t√≠ch:**

**Target Market:** ${product.target_market}
**Product Title:** ${product.title || 'T·ª∞ ƒê·ªòNG EXTRACT T·ª™ H√åNH ·∫¢NH'}
**Product Description:** ${product.description || 'T·ª∞ ƒê·ªòNG EXTRACT T·ª™ H√åNH ·∫¢NH'}
**Product Image 1:** [H√¨nh ·∫£nh s·∫£n ph·∫©m 1]
**Product Image 2:** ${product.image2 ? '[H√¨nh ·∫£nh s·∫£n ph·∫©m 2]' : 'Kh√¥ng c√≥ h√¨nh ·∫£nh th·ª© 2'}
**Ng√†y ph√¢n t√≠ch:** ${currentDate || new Date().toLocaleDateString('vi-VN', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}

**L∆ØU √ù QUAN TR·ªåNG:**
- N·∫øu Product Title l√† "T·ª∞ ƒê·ªòNG EXTRACT T·ª™ H√åNH ·∫¢NH", h√£y ph√¢n t√≠ch h√¨nh ·∫£nh ƒë·ªÉ t·∫°o ra title s·∫£n ph·∫©m ch√≠nh x√°c
- N·∫øu Product Description l√† "T·ª∞ ƒê·ªòNG EXTRACT T·ª™ H√åNH ·∫¢NH", h√£y ph√¢n t√≠ch h√¨nh ·∫£nh ƒë·ªÉ t·∫°o ra m√¥ t·∫£ s·∫£n ph·∫©m chi ti·∫øt
- S·ª≠ d·ª•ng th√¥ng tin t·ª´ h√¨nh ·∫£nh ƒë·ªÉ b·ªï sung cho ph√¢n t√≠ch th·ªã tr∆∞·ªùng
- **QUAN TR·ªåNG V·ªÄ TH·ªúI GIAN:** Ng√†y ph√¢n t√≠ch hi·ªán t·∫°i l√† ${currentDate || new Date().toLocaleDateString('vi-VN', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}. H√£y s·ª≠ d·ª•ng th√¥ng tin n√†y ƒë·ªÉ:
  - ƒê∆∞a ra c√°c insight v·ªÅ xu h∆∞·ªõng th·ªã tr∆∞·ªùng hi·ªán t·∫°i
  - G·ª£i √Ω th·ªùi ƒëi·ªÉm t·ªët nh·∫•t ƒë·ªÉ launch s·∫£n ph·∫©m
  - Ph√¢n t√≠ch c√°c d·ªãp l·ªÖ/s·ª± ki·ªán s·∫Øp t·ªõi c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn vi·ªác b√°n h√†ng
  - ƒê·ªÅ xu·∫•t chi·∫øn l∆∞·ª£c marketing ph√π h·ª£p v·ªõi th·ªùi ƒëi·ªÉm hi·ªán t·∫°i

---

## üìä **JSON Response Requirements**

Return the following JSON structure (in ${isVietnamese ? 'Vietnamese' : 'English'}):

**IMPORTANT: Generate exactly ${segmentationNumber} customer segments in the target_customers array.**

\`\`\`json

${generateJsonTemplate(isVietnamese)},
"target_customers": [
${generateTargetCustomersTemplate(segmentationNumber, isVietnamese)}
],
  "conclusions": [
    {
      "title": "${isVietnamese ? 'Chi·∫øn l∆∞·ª£c 1: T·∫≠p trung v√†o nh√≥m kh√°ch h√†ng ch√≠nh' : 'Strategy 1: Focus on Main Customer Groups'}",
      "focus_group_priority": "${isVietnamese ? 'T√™n nh√≥m kh√°ch h√†ng n√™n ch·∫°y ƒë·∫ßu ti√™n' : 'Customer group to target first'}",
      "best_content_angle": "${isVietnamese ? 'Angle ti·ªÅm nƒÉng nh·∫•t' : 'Most potential angle'}",
      "upsell_combo_suggestions": "${isVietnamese ? '√ù t∆∞·ªüng upsell ho·∫∑c combo' : 'Upsell or combo ideas'}",
      "risks_to_consider": "${isVietnamese ? 'Ph√°p l√Ω, m√πa v·ª•, logistics, etc.' : 'Legal, seasonal, logistics, etc.'}"
    },
    {
      "title": "${isVietnamese ? 'Chi·∫øn l∆∞·ª£c 2: M·ªü r·ªông th·ªã tr∆∞·ªùng m·ªõi' : 'Strategy 2: Expand to New Markets'}",
      "focus_group_priority": "${isVietnamese ? 'T√™n nh√≥m kh√°ch h√†ng n√™n ch·∫°y ƒë·∫ßu ti√™n' : 'Customer group to target first'}",
      "best_content_angle": "${isVietnamese ? 'Angle ti·ªÅm nƒÉng nh·∫•t' : 'Most potential angle'}",
      "upsell_combo_suggestions": "${isVietnamese ? '√ù t∆∞·ªüng upsell ho·∫∑c combo' : 'Upsell or combo ideas'}",
      "risks_to_consider": "${isVietnamese ? 'Ph√°p l√Ω, m√πa v·ª•, logistics, etc.' : 'Legal, seasonal, logistics, etc.'}"
    },
    {
      "title": "${isVietnamese ? 'Chi·∫øn l∆∞·ª£c 3: T·ªëi ∆∞u h√≥a n·ªôi dung hi·ªán t·∫°i' : 'Strategy 3: Optimize Current Content'}",
      "focus_group_priority": "${isVietnamese ? 'T√™n nh√≥m kh√°ch h√†ng n√™n ch·∫°y ƒë·∫ßu ti√™n' : 'Customer group to target first'}",
      "best_content_angle": "${isVietnamese ? 'Angle ti·ªÅm nƒÉng nh·∫•t' : 'Most potential angle'}",
      "upsell_combo_suggestions": "${isVietnamese ? '√ù t∆∞·ªüng upsell ho·∫∑c combo' : 'Upsell or combo ideas'}",
      "risks_to_consider": "${isVietnamese ? 'Ph√°p l√Ω, m√πa v·ª•, logistics, etc.' : 'Legal, seasonal, logistics, etc.'}"
    }
  ]
}
}
\`\`\`

${isVietnamese ? 'H√£y ph√¢n t√≠ch s·∫£n ph·∫©m n√†y v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ theo ƒë√∫ng c·∫•u tr√∫c JSON tr√™n.' : 'Please analyze this product and return the results according to the JSON structure above.'}`;

  const response = await axios.post(
    'https://openrouter.ai/api/v1/chat/completions',
    {
        model: 'google/gemini-2.5-flash-preview-09-2025',
      messages: [
        {
          role: 'system',
          content: isVietnamese 
            ? 'B·∫°n l√† chuy√™n gia ph√¢n t√≠ch th·ªã tr∆∞·ªùng v√† nh·∫≠n di·ªán s·∫£n ph·∫©m. B·∫°n c√≥ th·ªÉ ph√¢n t√≠ch h√¨nh ·∫£nh ƒë·ªÉ extract title v√† description s·∫£n ph·∫©m. Tr·∫£ v·ªÅ CH·ªà JSON h·ª£p l·ªá b·∫±ng ti·∫øng Vi·ªát, kh√¥ng c√≥ text th√™m, kh√¥ng c√≥ markdown formatting. T·∫•t c·∫£ n·ªôi dung trong JSON ph·∫£i ƒë∆∞·ª£c vi·∫øt b·∫±ng ti·∫øng Vi·ªát.'
            : 'You are a market analysis expert and product identification specialist. You can analyze images to extract product titles and descriptions. Return ONLY valid JSON in English, no additional text, no markdown formatting. All content in the JSON must be written in English.'
        },
        {
          role: 'user',
          content: prompt,
        },
      ],
      temperature: 0.7,
      max_tokens: 8000,
    },
    {
      headers: {
        'Authorization': `Bearer ${openRouterApiKey}`,
        'Content-Type': 'application/json',
        'HTTP-Referer': 'http://localhost:3000',
        'X-Title': 'Product Analysis Aff',
      },
    }
  );

  const content = response.data.choices[0].message.content;
  
  try {
    // Try to find complete JSON object
    let jsonStart = content.indexOf('{');
    if (jsonStart === -1) {
      return { raw_analysis: content };
    }
    
    // Find matching closing brace
    let braceCount = 0;
    let jsonEnd = -1;
    for (let i = jsonStart; i < content.length; i++) {
      if (content[i] === '{') braceCount++;
      if (content[i] === '}') braceCount--;
      if (braceCount === 0) {
        jsonEnd = i;
        break;
      }
    }
    
    if (jsonEnd === -1) {
      console.warn('Incomplete JSON found, using raw content');
      return { raw_analysis: content };
    }
    
    const jsonString = content.substring(jsonStart, jsonEnd + 1);
    return JSON.parse(jsonString);
  } catch (parseError) {
    console.error('Error parsing AI response:', parseError);
    console.error('Content length:', content.length);
    console.error('Content preview:', content.substring(0, 500));
    return { raw_analysis: content };
  }
}

// Product Listing Optimizer endpoint
router.post('/:id/optimize', authenticate, async (req: Request, res: Response) => {
  try {
    const authenticatedReq = req as AuthenticatedRequest;
    const { id } = req.params;
    const { type, data } = req.body;
    const userId = authenticatedReq.user?.id;

    if (!userId) {
      return res.status(401).json({ message: 'Unauthorized' });
    }

    console.log('üîç [ProductListingOptimizer] Starting optimization for product:', id);
    console.log('üîç [ProductListingOptimizer] Type:', type);
    console.log('üîç [ProductListingOptimizer] Data keys:', Object.keys(data || {}));
    console.log('üîç [ProductListingOptimizer] Full data:', JSON.stringify(data, null, 2));

    // Get the product analysis result
    const product = await prisma.productAff.findFirst({
      where: {
        id: id,
        userId: userId,
      },
    });

    if (!product) {
      return res.status(404).json({ message: 'Product not found' });
    }

    if (!product.analysis_result) {
      return res.status(400).json({ message: 'No analysis result available' });
    }

    let analysisResult;
    try {
      analysisResult = typeof product.analysis_result === 'string' 
        ? JSON.parse(product.analysis_result) 
        : product.analysis_result;
    } catch (parseError) {
      console.error('Error parsing analysis result:', parseError);
      return res.status(400).json({ message: 'Invalid analysis result format' });
    }

    const targetMarket = product.target_market || 'global';
    const openRouterApiKey = process.env.OPENROUTER_API_KEY;

    if (!openRouterApiKey) {
      console.error('OpenRouter API key not found');
      return res.status(500).json({ message: 'AI service not configured' });
    }

    let prompt = '';

                if (type === 'keyword') {
                  const keywordList = data.keywords.map((keyword: string) => `- ${keyword}`).join('\n');
                  const tone = data.tone || 'Expert';
                  
                  prompt = `Act as an expert Amazon/e-commerce SEO copywriter for the ${targetMarket} market.

            Based on the product's original listing and this comprehensive keyword analysis, generate a new, compelling, and SEO-optimized product title and description.

            **Product Information:**
            * Original Title: "${data.original_title}"
            * Original Description: "${data.original_description}"

            **Comprehensive Keyword List (from analysis):**
            ${keywordList}

            **Writing Tone:**
            * Use a ${tone.toLowerCase()} tone throughout the content
            * Match the tone to the target audience and product type
            * Ensure consistency between title and description

            **Your Task:**
            1. Generate a new Product Title:
               - Clear, concise, includes 2‚Äì3 high-value transactional keywords near the beginning.
               - Under 200 characters.
               - Written in ${tone.toLowerCase()} tone.
            2. Generate a new Product Description:
               - Write in PROFESSIONAL HTML format for Shopify compatibility
               - Use advanced HTML structure: <h2>, <h3>, <h4>, <p>, <ul>, <ol>, <li>, <strong>, <em>, <br>, <table>, <tr>, <td>, <th>, <div>, <span>
               - Create a structured layout with clear sections:
                 * Hero section with main benefit
                 * Key features table with specifications
                 * Benefits list with bullet points
                 * Technical details section
                 * Call-to-action paragraph
               - Use professional typography: bold headers, italicized benefits, clear bullet points
               - Include comparison tables for specifications if relevant
               - Make it visually appealing and easy to scan
               - Use ${tone.toLowerCase()}, persuasive, trustworthy tone with clear value propositions
               
               **Example Structure:**
               <h2>üöÄ [Main Benefit Headline]</h2>
               <p>[Compelling introduction paragraph]</p>
               
               <h3>‚ú® Key Features & Benefits</h3>
               <table>
                 <tr><th>Feature</th><th>Benefit</th><th>Why It Matters</th></tr>
                 <tr><td><strong>Feature 1</strong></td><td>Benefit description</td><td>Customer value</td></tr>
               </table>
               
               <h3>üìã Technical Specifications</h3>
               <ul>
                 <li><strong>Spec 1:</strong> Value with explanation</li>
                 <li><strong>Spec 2:</strong> Value with explanation</li>
               </ul>
               
               <h3>üí° Why Choose This Product?</h3>
               <p>[Social proof and unique selling proposition]</p>

            Output strictly as JSON with two keys:
            {
              "new_title": "...",
              "new_description": "..."
            }`;

                } else if (type === 'feature') {
                  const resolvedFeatures = data.resolved_features || [];
                  const unresolvedProblems = data.unresolved_problems || [];
                  const tone = data.tone || 'Expert';
                  
                  const resolvedFeaturesList = resolvedFeatures.map((feature: any) => 
                    `- Problem Solved: "${feature.problem}"\n  - The Feature (How we solve it): "${feature.reason}"`
                  ).join('\n\n');
                  
                  const unresolvedProblemsList = unresolvedProblems.map((problem: any) => 
                    `- Limitation: "${problem.problem}"\n  - Customer Feedback Example: "${problem.example_feedback}"`
                  ).join('\n\n');

                  prompt = `Act as an expert Product Copywriter. Your goal is to create a clear, benefit-driven product listing based on its proven features and known limitations.

**Product Information:**
* Product Name: ${product.title || 'Product'}
* Target Market: ${targetMarket}

**Product Feature Analysis:**

**1. Proven Product Features (What works well and solves customer problems):**
${resolvedFeaturesList}

**2. Known Issues & Limitations (What to be careful about when writing):**
${unresolvedProblemsList}

**Writing Tone:**
* Use a ${tone.toLowerCase()} tone throughout the content
* Match the tone to the target audience and product type
* Ensure consistency between title and description

**Your Task:**

1. **Generate a new Product Title:**
   - Highlight the product's strongest, most tangible feature from the "Proven Features" list.
   - Focus on the direct benefit to the customer. For example: "Bedsure Clump-Proof Comforter with 8 Secure Tabs - Machine Washable & Stays Fluffy".
   - Keep it concise and under 200 characters.
   - Written in ${tone.toLowerCase()} tone.

2. **Generate a new Product Description:**
   - Write in PROFESSIONAL HTML format for Shopify compatibility
   - Use advanced HTML structure: <h2>, <h3>, <h4>, <p>, <ul>, <ol>, <li>, <strong>, <em>, <br>, <table>, <tr>, <td>, <th>, <div>, <span>
   - Create a structured layout with clear sections:
     * Hero section highlighting the strongest proven feature
     * Features vs Benefits comparison table
     * Technical specifications table
     * Problem-Solution format with clear bullet points
     * Honest limitations section (if any)
     * Call-to-action with confidence
   - Use professional typography: bold headers, italicized benefits, clear bullet points
   - Include comparison tables showing "Before vs After" scenarios
   - **Crucially:** Handle the "Known Issues" with care. Do not make exaggerated claims related to them. For instance, for the 'All-Season' feature, frame it as "Ideal for most seasons" or "Provides balanced warmth for spring, fall, and air-conditioned rooms" instead of a blanket "perfect for all year round" statement. For "Fluffiness", manage expectations by stating "Follow instructions to restore its natural loft".
   - The tone should be confident about what the product does well, and honest about its limitations.
   - Use ${tone.toLowerCase()}, persuasive, trustworthy tone
   
   **Example Structure:**
   <h2>üèÜ [Strongest Feature Headline]</h2>
   <p>[Confident introduction highlighting proven features]</p>
   
   <h3>‚úÖ Proven Features That Work</h3>
   <table>
     <tr><th>Problem Solved</th><th>Our Solution</th><th>Customer Satisfaction</th></tr>
     <tr><td>Problem 1</td><td><strong>Feature description</strong></td><td>85% satisfied</td></tr>
   </table>
   
   <h3>üîß Technical Excellence</h3>
   <ul>
     <li><strong>Feature 1:</strong> Detailed explanation with benefits</li>
     <li><strong>Feature 2:</strong> Detailed explanation with benefits</li>
   </ul>
   
   <h3>‚ö†Ô∏è Important Notes</h3>
   <p><em>For optimal results: [Honest limitations and usage tips]</em></p>
   
   <h3>üéØ Why This Works</h3>
   <p>[Confident closing with value proposition]</p>

Output strictly as JSON with two keys:
{
  "new_title": "...",
  "new_description": "..."
}`;

                } else if (type === 'segmentation') {
                  const segmentData = data.segment_data;
                  const painPointsList = segmentData.common_painpoints?.map((point: string) => `- ${point}`).join('\n') || '';
                  const solutionsList = segmentData.solutions_and_content?.map((item: any) => 
                    `- For the pain point "${item.pain_point}", our solution is "${item.solution}".`
                  ).join('\n') || '';
                  const tone = data.tone || 'Expert';

                  prompt = `Act as a specialist Direct-to-Consumer (DTC) copywriter. Your task is to write a highly targeted product listing that speaks directly to a specific customer segment.

            **Product Information:**
            * Product Name: ${product.title || 'Product'}
            * Target Market: ${targetMarket}

            **Target Audience Profile:**
            * Segment Name: "${segmentData.name}"
            * Common Pain Points:
            ${painPointsList}
            * Product Solutions:
            ${solutionsList}

            **Writing Tone:**
            * Use a ${tone.toLowerCase()} tone throughout the content
            * Match the tone to the target audience and product type
            * Ensure consistency between title and description

            **Your Task:**
            1. Generate a new Product Title:
               - Emotionally resonate with "${segmentData.name}".
               - Highlight the core benefit that solves their top pain point.
               - Keep under 150 characters.
               - Written in ${tone.toLowerCase()} tone.

            2. Generate a new Product Description:
               - Write in PROFESSIONAL HTML format for Shopify compatibility
               - Use advanced HTML structure: <h2>, <h3>, <h4>, <p>, <ul>, <ol>, <li>, <strong>, <em>, <br>, <table>, <tr>, <td>, <th>, <div>, <span>
               - Create a structured layout with clear sections:
                 * Hero section addressing their specific pain points
                 * Solution presentation with benefits table
                 * Feature list tailored to their needs
                 * Social proof and testimonials section
                 * Call-to-action with urgency
               - Use professional typography: bold headers, italicized benefits, clear bullet points
               - Include comparison tables showing before/after scenarios
               - Make it visually appealing and emotionally resonant
               - Use ${tone.toLowerCase()} tone that matches the segment (e.g., elegant for Home D√©cor, warm for Comfort Seekers).
               
               **Example Structure:**
               <h2>üíù [Emotional Headline for ${segmentData.name}]</h2>
               <p>[Address their specific pain points with empathy]</p>
               
               <h3>üéØ Perfect Solution for You</h3>
               <table>
                 <tr><th>Your Challenge</th><th>Our Solution</th><th>Your Benefit</th></tr>
                 <tr><td>Pain point 1</td><td><strong>How we solve it</strong></td><td>Emotional benefit</td></tr>
               </table>
               
               <h3>‚ú® What Makes This Special for ${segmentData.name}</h3>
               <ul>
                 <li><strong>Benefit 1:</strong> Tailored to your lifestyle</li>
                 <li><strong>Benefit 2:</strong> Solves your specific needs</li>
               </ul>
               
               <h3>üåü Join Thousands of Happy Customers</h3>
               <p>[Social proof and call to action]</p>

            Output strictly as JSON with two keys:
            {
              "new_title": "...",
              "new_description": "..."
            }`;

                } else if (type === 'painpoint') {
                  const painpointData = data.painpoint_data;
                  const tone = data.tone || 'Expert';
                  
                  prompt = `Act as an expert Product Copywriter. Your goal is to create a compelling product listing that directly addresses a specific customer pain point.

**Product Information:**
* Product Name: ${product.title || 'Product'}
* Target Market: ${targetMarket}

**Customer Pain Point Analysis:**
* **Pain Point:** ${painpointData.painpoint}
* **Customer Segment:** ${painpointData.customer}
* **Problem Context:** This pain point affects ${painpointData.customer} who experience this specific challenge in their daily lives.

**Writing Tone:**
* Use a ${tone.toLowerCase()} tone throughout the content
* Focus on empathy and understanding of the customer's struggle
* Position the product as the solution to their specific problem
* Ensure consistency between title and description

**Your Task:**
1. Generate a new Product Title:
   - Lead with the pain point solution
   - Include emotional trigger words
   - Under 200 characters
   - Written in ${tone.toLowerCase()} tone

2. Generate a new Product Description:
   - Write in PROFESSIONAL HTML format for Shopify compatibility
   - Use advanced HTML structure: <h2>, <h3>, <h4>, <p>, <ul>, <ol>, <li>, <strong>, <em>, <br>, <table>, <tr>, <td>, <th>, <div>, <span>
   - Create a structured layout with clear sections:
     * Problem acknowledgment section (empathy)
     * Solution introduction
     * How it solves the specific pain point
     * Benefits and features
     * Social proof and call-to-action
   - Use professional typography: bold headers, italicized benefits, clear bullet points
   - Make it emotionally compelling and solution-focused
   - Use ${tone.toLowerCase()}, empathetic, solution-oriented tone
   
   **Example Structure:**
   <h2>üò∞ Tired of [Pain Point]?</h2>
   <p>[Empathetic acknowledgment of the problem]</p>
   
   <h3>‚ú® Finally, A Solution That Works</h3>
   <p>[How our product specifically addresses this pain point]</p>
   
   <h3>üéØ How We Solve Your [Pain Point] Problem</h3>
   <table>
     <tr><th>Your Challenge</th><th>Our Solution</th><th>Your Result</th></tr>
     <tr><td><strong>Pain Point</strong></td><td>How we solve it</td><td>Benefit you get</td></tr>
   </table>
   
   <h3>üí° Why This Works for ${painpointData.customer}</h3>
   <ul>
     <li><strong>Benefit 1:</strong> Specifically addresses your pain point</li>
     <li><strong>Benefit 2:</strong> Designed for your lifestyle</li>
   </ul>
   
   <h3>üåü Join Others Who've Solved This Problem</h3>
   <p>[Social proof and call to action]</p>

Output strictly as JSON with two keys:
{
  "new_title": "...",
  "new_description": "..."
}`;

    } else {
      return res.status(400).json({ message: 'Invalid optimization type' });
    }

    console.log('üöÄ [ProductListingOptimizer] Calling OpenRouter API...');
    console.log('üöÄ [ProductListingOptimizer] Prompt length:', prompt.length);

    const response = await axios.post('https://openrouter.ai/api/v1/chat/completions', {
      model: 'openai/gpt-4o-mini',
      messages: [
        {
          role: 'user',
          content: prompt,
        },
      ],
      temperature: 0.7,
      max_tokens: 2000,
    }, {
      headers: {
        'Authorization': `Bearer ${openRouterApiKey}`,
        'Content-Type': 'application/json',
        'HTTP-Referer': 'http://localhost:3000',
        'X-Title': 'Product Listing Optimizer',
      },
    });

    console.log('‚úÖ [ProductListingOptimizer] OpenRouter API response received');
    console.log('‚úÖ [ProductListingOptimizer] Response status:', response.status);

    const content = response.data.choices[0].message.content;
    
    try {
      // Try to find complete JSON object
      let jsonStart = content.indexOf('{');
      if (jsonStart === -1) {
        throw new Error('No JSON found in response');
      }
      
      // Find matching closing brace
      let braceCount = 0;
      let jsonEnd = -1;
      for (let i = jsonStart; i < content.length; i++) {
        if (content[i] === '{') braceCount++;
        if (content[i] === '}') braceCount--;
        if (braceCount === 0) {
          jsonEnd = i;
          break;
        }
      }
      
      if (jsonEnd === -1) {
        throw new Error('Incomplete JSON found');
      }
      
      const jsonString = content.substring(jsonStart, jsonEnd + 1);
      const result = JSON.parse(jsonString);
      
      console.log('‚úÖ [ProductListingOptimizer] Successfully parsed result');
      res.json(result);
      
    } catch (parseError) {
      console.error('Error parsing AI response:', parseError);
      console.error('Content length:', content.length);
      console.error('Content preview:', content.substring(0, 500));
      res.status(500).json({ message: 'Failed to parse AI response' });
    }

  } catch (error) {
    console.error('Error in product listing optimizer:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// AI Ads Generator endpoint
router.post('/:id/generate-ads', async (req, res) => {
  try {
    console.log('üé¨ [AI Ads Generator] Request received:', req.params, req.body);
    
    const { id } = req.params;
    const { platform, mode, format, data, num_versions = 1, model = 'openai/gpt-4o-mini' } = req.body;

    console.log('üé¨ [AI Ads Generator] Parsed params:', { id, platform, mode, format, data, num_versions, model });

    // Get product analysis data
    const product = await prisma.productAff.findUnique({
      where: { id }
    });

    console.log('üé¨ [AI Ads Generator] Product found:', product ? 'Yes' : 'No');

    if (!product || !product.analysis_result) {
      console.log('üé¨ [AI Ads Generator] Product or analysis_result not found');
      return res.status(404).json({ message: 'Product analysis not found' });
    }

    const analysisResult = JSON.parse(product.analysis_result);
    const targetMarket = product.target_market || 'Global';
    const productName = product.title;
    const productDescription = product.description;

    console.log('üé¨ [AI Ads Generator] Analysis result parsed successfully');

    // --- T·∫†O MASTER CONTEXT ---
    const masterContext = {
      productName: productName,
      productDescription: productDescription ? productDescription.substring(0, 200) + '...' : 'S·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao',
      targetMarket: targetMarket,
      brandPersona: req.body.brand_persona || 'Hi·ªán ƒë·∫°i, ƒë√°ng tin c·∫≠y v√† t·∫≠p trung v√†o t√≠nh nƒÉng',
      adGoal: req.body.ad_goal || 'T·ªëi ƒëa h√≥a l∆∞·ª£t nh·∫•p chu·ªôt (CTR) v√† chuy·ªÉn ƒë·ªïi cho s·∫£n ph·∫©m m·ªõi',
      // --- L·∫•y d·ªØ li·ªáu chi·∫øn l∆∞·ª£c t·ª´ analysis_result ---
      biggestOpportunity: analysisResult.executive_summary?.biggest_opportunity || 'N/A',
      // L·∫•y chi·∫øn l∆∞·ª£c ∆∞u ti√™n t·ª´ conclusions
      primaryStrategyAngle: analysisResult.conclusions?.[0]?.best_content_angle || 'T·∫≠p trung v√†o t√≠nh nƒÉng n·ªïi b·∫≠t nh·∫•t.'
    };

    console.log('üé¨ [AI Ads Generator] Master context created:', masterContext);

    let prompt = '';

    // Build prompt based on mode
    if (mode === 'segment') {
      const segment = data.segment_data;
      const painPointsList = segment.common_painpoints?.map((p: string) => `- ${p}`).join('\n') || 'N/A';
      // L·∫•y c√°c √Ω t∆∞·ªüng c√≥ s·∫µn t·ª´ data
      const inspirationalHooks = segment.solutions_and_content?.map((s: any) => `- "${s.content_hook}"`).join('\n') || 'N/A';
      const inspirationalVisuals = segment.solutions_and_content?.map((s: any) => `- "${s.ad_visual_idea}"`).join('\n') || 'N/A';
      
      prompt = `B·∫°n l√† m·ªôt Gi√°m ƒë·ªëc S√°ng t·∫°o t·∫°i m·ªôt agency qu·∫£ng c√°o h√†ng ƒë·∫ßu, chuy√™n x√¢y d·ª±ng c√°c chi·∫øn d·ªãch ra m·∫Øt s·∫£n ph·∫©m c√¥ng ngh·ªá tr√™n social media.

**MASTER CONTEXT (B·ªëi c·∫£nh chi·∫øn d·ªãch):**
*   **S·∫£n ph·∫©m:** ${masterContext.productName}
*   **M√¥ t·∫£:** ${masterContext.productDescription}
*   **Th·ªã tr∆∞·ªùng:** ${masterContext.targetMarket}
*   **T√≠nh c√°ch th∆∞∆°ng hi·ªáu:** ${masterContext.brandPersona}
*   **M·ª•c ti√™u qu·∫£ng c√°o:** ${masterContext.adGoal}
*   **G√≥c ƒë·ªô chi·∫øn l∆∞·ª£c ch√≠nh:** ${masterContext.primaryStrategyAngle}
*   **C∆° h·ªôi l·ªõn nh·∫•t c·∫ßn khai th√°c:** ${masterContext.biggestOpportunity}

**NHI·ªÜM V·ª§:**
Vi·∫øt m·ªôt m·∫´u qu·∫£ng c√°o cho n·ªÅn t·∫£ng **${platform}**, s·ª≠ d·ª•ng framework **${format}**, nh·∫Øm th·∫≥ng v√†o ph√¢n kh√∫c kh√°ch h√†ng sau:

*   **T√™n ph√¢n kh√∫c:** ${segment.name}
*   **Nh·ªØng "N·ªói ƒëau" c·ªßa h·ªç:**
${painPointsList}

**NGU·ªíN C·∫¢M H·ª®NG (H√£y ph√°t tri·ªÉn d·ª±a tr√™n nh·ªØng √Ω t∆∞·ªüng n√†y):**
*   **√ù t∆∞·ªüng Ti√™u ƒë·ªÅ c√≥ s·∫µn:**
${inspirationalHooks}
*   **√ù t∆∞·ªüng H√¨nh ·∫£nh/Video c√≥ s·∫µn:**
${inspirationalVisuals}

**Y√äU C·∫¶U ƒê·∫¶U RA:**
Ng√¥n ng·ªØ: **Ti·∫øng Vi·ªát**.
T·∫°o **${num_versions} phi√™n b·∫£n** qu·∫£ng c√°o kh√°c nhau ƒë·ªÉ A/B test.

**QUAN TR·ªåNG - ƒê·ªäNH D·∫†NG JSON:**
- Ch·ªâ tr·∫£ v·ªÅ JSON thu·∫ßn t√∫y, KH√îNG c√≥ text gi·∫£i th√≠ch
- KH√îNG c√≥ d·∫•u xu·ªëng d√≤ng (\\n) trong JSON
- KH√îNG c√≥ backslash escape characters
- JSON ph·∫£i valid v√† parse ƒë∆∞·ª£c
- B·∫Øt ƒë·∫ßu b·∫±ng { v√† k·∫øt th√∫c b·∫±ng }

**ƒê·∫∂C BI·ªÜT CHO TIKTOK:**
- N·∫øu platform l√† TikTok, ad_visual_idea PH·∫¢I l√† k·ªãch b·∫£n video 30 gi√¢y
- Chia th√†nh 5-7 c·∫£nh r√µ r√†ng v·ªõi timeline c·ª• th·ªÉ
- M·ªói c·∫£nh ph·∫£i c√≥ format: "C·∫£nh X (th·ªùi gian): m√¥ t·∫£ h√†nh ƒë·ªông"
- V√≠ d·ª•: "C·∫£nh 1 (0-3s): Hook m·∫°nh. C·∫£nh 2 (4-8s): V·∫•n ƒë·ªÅ. C·∫£nh 3 (9-15s): Gi·∫£i ph√°p..."
{
  "versions": [
    {
      "ad_headline": "Phi√™n b·∫£n 1: M·ªôt ti√™u ƒë·ªÅ ch√≠nh ƒë∆∞·ª£c tinh ch·ªânh t·ª´ c√°c '√Ω t∆∞·ªüng c√≥ s·∫µn', ƒë√°nh th·∫≥ng v√†o n·ªói ƒëau l·ªõn nh·∫•t c·ªßa ph√¢n kh√∫c n√†y.",
      "ad_copy": "Phi√™n b·∫£n 1: N·ªôi dung qu·∫£ng c√°o theo framework ${format}, k·∫øt h·ª£p nhu·∫ßn nhuy·ªÖn gi·ªØa vi·ªác gi·∫£i quy·∫øt n·ªói ƒëau v√† th·ªÉ hi·ªán c√° t√≠nh c·ªßa th∆∞∆°ng hi·ªáu. H√£y l√†m cho n√≥ s·ªëng ƒë·ªông v√† thuy·∫øt ph·ª•c h∆°n.",
      "ad_visual_idea": "Phi√™n b·∫£n 1: T·∫°o k·ªãch b·∫£n video TikTok 30 gi√¢y v·ªõi c√°c c·∫£nh ƒë∆∞·ª£c chia r√µ r√†ng theo timeline. M·ªói c·∫£nh ph·∫£i c√≥ th·ªùi gian c·ª• th·ªÉ v√† m√¥ t·∫£ h√†nh ƒë·ªông chi ti·∫øt. V√≠ d·ª•: C·∫£nh 1 (0-3s): M·ªü ƒë·∫ßu v·ªõi v·∫•n ƒë·ªÅ. C·∫£nh 2 (4-8s): Gi·ªõi thi·ªáu s·∫£n ph·∫©m. C·∫£nh 3 (9-15s): Demo t√≠nh nƒÉng. C·∫£nh 4 (16-25s): K·∫øt qu·∫£ v√† l·ª£i √≠ch. C·∫£nh 5 (26-30s): Call to action.",
      "cta": "L·ªùi k√™u g·ªçi h√†nh ƒë·ªông ph√π h·ª£p v·ªõi ph√¢n kh√∫c v√† m·ª•c ti√™u. V√≠ d·ª•: 'S·ªü h·ªØu ngay h√¥m nay!'",
      "expected_performance": "Phi√™n b·∫£n 1: D·ª± ki·∫øn tƒÉng CTR 25-35% v√† conversion rate 15-20% v√¨ ti√™u ƒë·ªÅ ƒë√°nh th·∫≥ng v√†o n·ªói ƒëau l·ªõn nh·∫•t c·ªßa ph√¢n kh√∫c, t·∫°o s·ª± ƒë·ªìng c·∫£m m·∫°nh m·∫Ω v√† framework ${format} gi√∫p d·∫´n d·∫Øt kh√°ch h√†ng qua h√†nh tr√¨nh mua h√†ng logic."
    }${num_versions > 1 ? `,
    {
      "ad_headline": "Phi√™n b·∫£n 2: M·ªôt g√≥c ti·∫øp c·∫≠n kh√°c, c√≥ th·ªÉ t·∫≠p trung v√†o l·ª£i √≠ch ho·∫∑c c·∫£m x√∫c kh√°c bi·ªát.",
      "ad_copy": "Phi√™n b·∫£n 2: N·ªôi dung v·ªõi tone voice kh√°c, c√≥ th·ªÉ chuy√™n nghi·ªáp h∆°n ho·∫∑c th√¢n thi·ªán h∆°n, nh∆∞ng v·∫´n theo framework ${format}.",
      "ad_visual_idea": "Phi√™n b·∫£n 2: K·ªãch b·∫£n video TikTok 30 gi√¢y v·ªõi g√≥c nh√¨n kh√°c. Chia th√†nh 5-6 c·∫£nh r√µ r√†ng v·ªõi timeline c·ª• th·ªÉ. M·ªói c·∫£nh ph·∫£i c√≥ th·ªùi gian b·∫Øt ƒë·∫ßu-k·∫øt th√∫c v√† m√¥ t·∫£ h√†nh ƒë·ªông chi ti·∫øt ƒë·ªÉ d·ªÖ s·∫£n xu·∫•t.",
      "cta": "CTA kh√°c bi·ªát, c√≥ th·ªÉ 'Kh√°m ph√° ngay!' ho·∫∑c 'Tr·∫£i nghi·ªám mi·ªÖn ph√≠!'",
      "expected_performance": "Phi√™n b·∫£n 2: D·ª± ki·∫øn tƒÉng CTR 20-30% v√† conversion rate 12-18% v√¨ tone voice kh√°c bi·ªát thu h√∫t nh√≥m kh√°ch h√†ng kh√°c, t·∫°o s·ª± ƒëa d·∫°ng trong chi·∫øn d·ªãch v√† gi·∫£m ad fatigue."
    }` : ''}${num_versions > 2 ? `,
    {
      "ad_headline": "Phi√™n b·∫£n 3: G√≥c ti·∫øp c·∫≠n th·ª© ba, c√≥ th·ªÉ t·∫≠p trung v√†o urgency ho·∫∑c social proof.",
      "ad_copy": "Phi√™n b·∫£n 3: N·ªôi dung v·ªõi approach kh√°c, c√≥ th·ªÉ s·ª≠ d·ª•ng urgency, scarcity ho·∫∑c social proof, v·∫´n theo framework ${format}.",
      "ad_visual_idea": "Phi√™n b·∫£n 3: K·ªãch b·∫£n video TikTok 30 gi√¢y v·ªõi concept ho√†n to√†n kh√°c. Chia th√†nh 6-7 c·∫£nh v·ªõi timeline chi ti·∫øt. M·ªói c·∫£nh ph·∫£i c√≥ th·ªùi gian c·ª• th·ªÉ (v√≠ d·ª•: C·∫£nh 1 (0-4s): Hook m·∫°nh. C·∫£nh 2 (5-10s): V·∫•n ƒë·ªÅ. C·∫£nh 3 (11-18s): Gi·∫£i ph√°p. C·∫£nh 4 (19-25s): Demo. C·∫£nh 5 (26-30s): CTA).",
      "cta": "CTA th·ª© ba, c√≥ th·ªÉ 'ƒê·∫∑t h√†ng ngay!' ho·∫∑c 'Tham gia c√πng h√†ng ng√†n ng∆∞·ªùi!'",
      "expected_performance": "Phi√™n b·∫£n 3: D·ª± ki·∫øn tƒÉng CTR 30-40% v√† conversion rate 20-25% v√¨ urgency v√† social proof t·∫°o t√¢m l√Ω FOMO m·∫°nh m·∫Ω, th√∫c ƒë·∫©y h√†nh ƒë·ªông nhanh ch√≥ng v√† tƒÉng t·ª∑ l·ªá chuy·ªÉn ƒë·ªïi."
    }` : ''}
  ]
}`;

    } else if (mode === 'painpoint') {
      const painpointData = data.painpoint_data;
      // T√¨m customer segment t∆∞∆°ng ·ª©ng ƒë·ªÉ l·∫•y th√¥ng tin context
      const customerSegment = analysisResult.target_customers?.find((c: any) => c.name === painpointData.customer);
      const segmentContext = customerSegment ? `
*   **Nh√≥m kh√°ch h√†ng:** ${customerSegment.name}
*   **ƒê·ªô tu·ªïi:** ${customerSegment.age_range || 'N/A'}
*   **Ngh·ªÅ nghi·ªáp:** ${customerSegment.occupations?.join(', ') || 'N/A'}
*   **V·ªã tr√≠:** ${customerSegment.locations?.join(', ') || 'N/A'}
*   **H√†nh vi mua h√†ng:** ${customerSegment.buying_behavior || 'N/A'}
*   **ƒê·ªông c∆° c·∫£m x√∫c:** ${customerSegment.emotional_motivations || 'N/A'}
      ` : '';
      
      // T√¨m gi·∫£i ph√°p t·ª´ product problems ho·∫∑c t·∫°o generic solution
      const productSolution = analysisResult.product_problems?.resolved?.find((r: any) => 
        r.problem && painpointData.painpoint.toLowerCase().includes(r.problem.toLowerCase())
      )?.reason || 'S·∫£n ph·∫©m ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ n√†y.';
      
      prompt = `B·∫°n l√† m·ªôt chuy√™n gia s√°ng t·∫°o n·ªôi dung qu·∫£ng c√°o, b·∫≠c th·∫ßy c·ªßa vi·ªác k·ªÉ chuy·ªán d·ª±a tr√™n s·ª± th·∫•u hi·ªÉu kh√°ch h√†ng.

**MASTER CONTEXT (B·ªëi c·∫£nh chi·∫øn d·ªãch):**
*   **S·∫£n ph·∫©m:** ${masterContext.productName}
*   **M√¥ t·∫£:** ${masterContext.productDescription}
*   **Th·ªã tr∆∞·ªùng:** ${masterContext.targetMarket}
*   **T√≠nh c√°ch th∆∞∆°ng hi·ªáu:** ${masterContext.brandPersona}
*   **M·ª•c ti√™u qu·∫£ng c√°o:** ${masterContext.adGoal}
*   **G√≥c ƒë·ªô chi·∫øn l∆∞·ª£c ch√≠nh:** ${masterContext.primaryStrategyAngle}

**TH√îNG TIN NH√ìM KH√ÅCH H√ÄNG:**
${segmentContext}

**NHI·ªÜM V·ª§:**
Vi·∫øt m·ªôt m·∫´u qu·∫£ng c√°o cho n·ªÅn t·∫£ng **${platform}** t·∫≠p trung gi·∫£i quy·∫øt m·ªôt "n·ªói ƒëau" c·ª• th·ªÉ c·ªßa kh√°ch h√†ng, s·ª≠ d·ª•ng framework **${format}** (v√≠ d·ª•: PAS - Problem, Agitate, Solve).

*   **V·∫•n ƒë·ªÅ c·∫ßn gi·∫£i quy·∫øt:** ${painpointData.painpoint}
*   **Nh√≥m kh√°ch h√†ng g·∫∑p v·∫•n ƒë·ªÅ:** ${painpointData.customer}
*   **Gi·∫£i ph√°p c·ªßa ch√∫ng ta:** ${productSolution}

**Y√äU C·∫¶U ƒê·∫¶U RA:**
Ng√¥n ng·ªØ: **Ti·∫øng Vi·ªát**.
T·∫°o **${num_versions} phi√™n b·∫£n** qu·∫£ng c√°o kh√°c nhau ƒë·ªÉ A/B test.

**QUAN TR·ªåNG - ƒê·ªäNH D·∫†NG JSON:**
- Ch·ªâ tr·∫£ v·ªÅ JSON thu·∫ßn t√∫y, KH√îNG c√≥ text gi·∫£i th√≠ch
- KH√îNG c√≥ d·∫•u xu·ªëng d√≤ng (\\n) trong JSON
- KH√îNG c√≥ backslash escape characters
- JSON ph·∫£i valid v√† parse ƒë∆∞·ª£c
- B·∫Øt ƒë·∫ßu b·∫±ng { v√† k·∫øt th√∫c b·∫±ng }

**ƒê·∫∂C BI·ªÜT CHO TIKTOK:**
- N·∫øu platform l√† TikTok, ad_visual_idea PH·∫¢I l√† k·ªãch b·∫£n video 30 gi√¢y
- Chia th√†nh 5-7 c·∫£nh r√µ r√†ng v·ªõi timeline c·ª• th·ªÉ
- M·ªói c·∫£nh ph·∫£i c√≥ format: "C·∫£nh X (th·ªùi gian): m√¥ t·∫£ h√†nh ƒë·ªông"
- V√≠ d·ª•: "C·∫£nh 1 (0-3s): Hook m·∫°nh. C·∫£nh 2 (4-8s): V·∫•n ƒë·ªÅ. C·∫£nh 3 (9-15s): Gi·∫£i ph√°p..."
{
  "versions": [
    {
      "ad_headline": "Phi√™n b·∫£n 1: Ti√™u ƒë·ªÅ gi·∫≠t t√≠t, n√™u b·∫≠t v·∫•n ƒë·ªÅ ho·∫∑c ƒë·∫∑t m·ªôt c√¢u h·ªèi d·ª±a tr√™n feedback c·ªßa kh√°ch h√†ng.",
      "ad_copy": "Phi√™n b·∫£n 1: N·ªôi dung qu·∫£ng c√°o theo framework ${format}. B·∫Øt ƒë·∫ßu b·∫±ng vi·ªác tr√≠ch d·∫´n ho·∫∑c di·ªÖn gi·∫£i l·∫°i feedback c·ªßa kh√°ch h√†ng ƒë·ªÉ t·∫°o s·ª± ƒë·ªìng c·∫£m, sau ƒë√≥ gi·ªõi thi·ªáu s·∫£n ph·∫©m nh∆∞ m·ªôt gi·∫£i ph√°p ho√†n h·∫£o.",
      "ad_visual_idea": "Phi√™n b·∫£n 1: K·ªãch b·∫£n video TikTok 30 gi√¢y th·ªÉ hi·ªán s·ª± t∆∞∆°ng ph·∫£n 'tr∆∞·ªõc-sau'. Chia th√†nh 5-6 c·∫£nh r√µ r√†ng: C·∫£nh 1 (0-4s): V·∫•n ƒë·ªÅ hi·ªán t·∫°i. C·∫£nh 2 (5-10s): Gi·ªõi thi·ªáu s·∫£n ph·∫©m. C·∫£nh 3 (11-18s): Demo gi·∫£i ph√°p. C·∫£nh 4 (19-25s): K·∫øt qu·∫£ 'sau'. C·∫£nh 5 (26-30s): CTA. M·ªói c·∫£nh ph·∫£i c√≥ th·ªùi gian c·ª• th·ªÉ v√† m√¥ t·∫£ h√†nh ƒë·ªông chi ti·∫øt.",
      "cta": "L·ªùi k√™u g·ªçi h√†nh ƒë·ªông mang t√≠nh gi·∫£i ph√°p. V√≠ d·ª•: 'Tr·∫£i nghi·ªám s·ª± kh√°c bi·ªát!'",
      "expected_performance": "Phi√™n b·∫£n 1: D·ª± ki·∫øn tƒÉng CTR 30-40% v√† conversion rate 18-25% v√¨ t∆∞∆°ng ph·∫£n 'tr∆∞·ªõc-sau' t·∫°o visual impact m·∫°nh, d·ªÖ hi·ªÉu v√† thuy·∫øt ph·ª•c kh√°ch h√†ng v·ªÅ hi·ªáu qu·∫£ s·∫£n ph·∫©m."
    }${num_versions > 1 ? `,
    {
      "ad_headline": "Phi√™n b·∫£n 2: G√≥c ti·∫øp c·∫≠n kh√°c, c√≥ th·ªÉ t·∫≠p trung v√†o gi·∫£i ph√°p ho·∫∑c k·∫øt qu·∫£.",
      "ad_copy": "Phi√™n b·∫£n 2: N·ªôi dung v·ªõi tone kh√°c, c√≥ th·ªÉ chuy√™n nghi·ªáp h∆°n ho·∫∑c th√¢n thi·ªán h∆°n, v·∫´n theo framework ${format}.",
      "ad_visual_idea": "Phi√™n b·∫£n 2: K·ªãch b·∫£n video TikTok 30 gi√¢y v·ªõi g√≥c nh√¨n kh√°c. Chia th√†nh 6 c·∫£nh: C·∫£nh 1 (0-3s): Hook. C·∫£nh 2 (4-8s): V·∫•n ƒë·ªÅ. C·∫£nh 3 (9-14s): Gi·∫£i ph√°p. C·∫£nh 4 (15-22s): Demo s·ª≠ d·ª•ng. C·∫£nh 5 (23-27s): L·ª£i √≠ch. C·∫£nh 6 (28-30s): CTA. M·ªói c·∫£nh c√≥ timeline c·ª• th·ªÉ v√† m√¥ t·∫£ chi ti·∫øt.",
      "cta": "CTA kh√°c bi·ªát, c√≥ th·ªÉ 'Gi·∫£i quy·∫øt ngay!' ho·∫∑c 'Th·ª≠ ngay h√¥m nay!'",
      "expected_performance": "Phi√™n b·∫£n 2: D·ª± ki·∫øn tƒÉng CTR 25-35% v√† conversion rate 15-22% v√¨ g√≥c nh√¨n kh√°c thu h√∫t audience kh√°c, tƒÉng reach v√† gi·∫£m competition v·ªõi version 1."
    }` : ''}${num_versions > 2 ? `,
    {
      "ad_headline": "Phi√™n b·∫£n 3: G√≥c ti·∫øp c·∫≠n th·ª© ba, c√≥ th·ªÉ s·ª≠ d·ª•ng urgency ho·∫∑c social proof.",
      "ad_copy": "Phi√™n b·∫£n 3: N·ªôi dung v·ªõi approach kh√°c, c√≥ th·ªÉ s·ª≠ d·ª•ng urgency, scarcity ho·∫∑c social proof, v·∫´n theo framework ${format}.",
      "ad_visual_idea": "Phi√™n b·∫£n 3: K·ªãch b·∫£n video TikTok 30 gi√¢y v·ªõi concept testimonial/before-after. Chia th√†nh 7 c·∫£nh: C·∫£nh 1 (0-2s): Hook testimonial. C·∫£nh 2 (3-7s): V·∫•n ƒë·ªÅ 'tr∆∞·ªõc'. C·∫£nh 3 (8-12s): Gi·ªõi thi·ªáu s·∫£n ph·∫©m. C·∫£nh 4 (13-19s): Demo 'sau'. C·∫£nh 5 (20-24s): So s√°nh tr∆∞·ªõc-sau. C·∫£nh 6 (25-28s): Social proof. C·∫£nh 7 (29-30s): CTA. Timeline chi ti·∫øt cho t·ª´ng c·∫£nh.",
      "cta": "CTA th·ª© ba, c√≥ th·ªÉ 'Kh√¥ng b·ªè l·ª°!' ho·∫∑c 'H√†ng ng√†n ng∆∞·ªùi ƒë√£ tin t∆∞·ªüng!'",
      "expected_performance": "Phi√™n b·∫£n 3: D·ª± ki·∫øn tƒÉng CTR 35-45% v√† conversion rate 22-30% v√¨ testimonial v√† social proof t·∫°o trust m·∫°nh, gi·∫£m hesitation v√† tƒÉng confidence trong quy·∫øt ƒë·ªãnh mua h√†ng."
    }` : ''}
  ]
}`;

    } else if (mode === 'feature') {
      const feature = data.feature_data;
      
      prompt = `B·∫°n l√† m·ªôt copywriter chuy√™n v·ªÅ chuy·ªÉn ƒë·ªïi, c√≥ kh·∫£ nƒÉng bi·∫øn nh·ªØng t√≠nh nƒÉng kh√¥ khan th√†nh nh·ªØng l·ª£i √≠ch kh√¥ng th·ªÉ ch·ªëi t·ª´.

**MASTER CONTEXT (B·ªëi c·∫£nh chi·∫øn d·ªãch):**
*   **S·∫£n ph·∫©m:** ${masterContext.productName}
*   **M√¥ t·∫£:** ${masterContext.productDescription}
*   **Th·ªã tr∆∞·ªùng:** ${masterContext.targetMarket}
*   **T√≠nh c√°ch th∆∞∆°ng hi·ªáu:** ${masterContext.brandPersona}
*   **M·ª•c ti√™u qu·∫£ng c√°o:** ${masterContext.adGoal}
*   **G√≥c ƒë·ªô chi·∫øn l∆∞·ª£c ch√≠nh:** ${masterContext.primaryStrategyAngle}
*   **C∆° h·ªôi l·ªõn nh·∫•t c·∫ßn khai th√°c:** ${masterContext.biggestOpportunity}

**NHI·ªÜM V·ª§:**
Vi·∫øt m·ªôt m·∫´u qu·∫£ng c√°o cho n·ªÅn t·∫£ng **${platform}** t·∫≠p trung v√†o vi·ªác chuy·ªÉn ƒë·ªïi m·ªôt t√≠nh nƒÉng th√†nh l·ª£i √≠ch, s·ª≠ d·ª•ng framework **${format}** (v√≠ d·ª•: FAB - Features, Advantages, Benefits). H√£y li√™n k·∫øt t√≠nh nƒÉng n√†y v·ªõi c∆° h·ªôi l·ªõn nh·∫•t c·ªßa s·∫£n ph·∫©m n·∫øu c√≥ th·ªÉ.

*   **T√≠nh nƒÉng c·ªët l√µi:** ${feature.problem} // D√π key l√† 'problem', trong context n√†y n√≥ l√† 't√≠nh nƒÉng ƒë√£ gi·∫£i quy·∫øt ƒë∆∞·ª£c v·∫•n ƒë·ªÅ'
*   **L·ª£i √≠ch tr·ª±c ti·∫øp cho kh√°ch h√†ng:** ${feature.reason} // D·ªØ li·ªáu n√†y kh√¥ng c√≥ trong JSON m·ªõi, nh∆∞ng c√≥ th·ªÉ suy ra t·ª´ \`problem\` v√† \`satisfaction_percent\`
*   **T·ªâ l·ªá h√†i l√≤ng:** ${feature.satisfaction_percent}%

**Y√äU C·∫¶U ƒê·∫¶U RA:**
Ng√¥n ng·ªØ: **Ti·∫øng Vi·ªát**.
T·∫°o **${num_versions} phi√™n b·∫£n** qu·∫£ng c√°o kh√°c nhau ƒë·ªÉ A/B test.

**QUAN TR·ªåNG - ƒê·ªäNH D·∫†NG JSON:**
- Ch·ªâ tr·∫£ v·ªÅ JSON thu·∫ßn t√∫y, KH√îNG c√≥ text gi·∫£i th√≠ch
- KH√îNG c√≥ d·∫•u xu·ªëng d√≤ng (\\n) trong JSON
- KH√îNG c√≥ backslash escape characters
- JSON ph·∫£i valid v√† parse ƒë∆∞·ª£c
- B·∫Øt ƒë·∫ßu b·∫±ng { v√† k·∫øt th√∫c b·∫±ng }

**ƒê·∫∂C BI·ªÜT CHO TIKTOK:**
- N·∫øu platform l√† TikTok, ad_visual_idea PH·∫¢I l√† k·ªãch b·∫£n video 30 gi√¢y
- Chia th√†nh 5-7 c·∫£nh r√µ r√†ng v·ªõi timeline c·ª• th·ªÉ
- M·ªói c·∫£nh ph·∫£i c√≥ format: "C·∫£nh X (th·ªùi gian): m√¥ t·∫£ h√†nh ƒë·ªông"
- V√≠ d·ª•: "C·∫£nh 1 (0-3s): Hook m·∫°nh. C·∫£nh 2 (4-8s): V·∫•n ƒë·ªÅ. C·∫£nh 3 (9-15s): Gi·∫£i ph√°p..."
{
  "versions": [
    {
      "ad_headline": "Phi√™n b·∫£n 1: M·ªôt ti√™u ƒë·ªÅ t·∫≠p trung v√†o k·∫øt qu·∫£ cu·ªëi c√πng m√† kh√°ch h√†ng nh·∫≠n ƒë∆∞·ª£c, nh·∫•n m·∫°nh s·ª± h√†i l√≤ng. V√≠ d·ª•: '95% ng∆∞·ªùi d√πng h√†i l√≤ng v·ªõi t√≠nh nƒÉng T·ª± ƒë·ªông T·∫Øt/M·ªü'.",
      "ad_copy": "Phi√™n b·∫£n 1: N·ªôi dung qu·∫£ng c√°o theo framework ${format}. Gi·ªõi thi·ªáu t√≠nh nƒÉng, gi·∫£i th√≠ch t·∫°i sao n√≥ v∆∞·ª£t tr·ªôi v√† m√¥ t·∫£ l·ª£i √≠ch kh√°ch h√†ng nh·∫≠n ƒë∆∞·ª£c. S·ª≠ d·ª•ng con s·ªë '${feature.satisfaction_percent}%' nh∆∞ m·ªôt b·∫±ng ch·ª©ng x√£ h·ªôi m·∫°nh m·∫Ω.",
      "ad_visual_idea": "Phi√™n b·∫£n 1: K·ªãch b·∫£n video TikTok 30 gi√¢y demo t√≠nh nƒÉng. Chia th√†nh 6 c·∫£nh: C·∫£nh 1 (0-3s): Hook v·ªõi t√≠nh nƒÉng. C·∫£nh 2 (4-8s): V·∫•n ƒë·ªÅ c·∫ßn gi·∫£i quy·∫øt. C·∫£nh 3 (9-15s): Demo t√≠nh nƒÉng ho·∫°t ƒë·ªông. C·∫£nh 4 (16-22s): L·ª£i √≠ch th·ª±c t·∫ø. C·∫£nh 5 (23-27s): So s√°nh v·ªõi s·∫£n ph·∫©m kh√°c. C·∫£nh 6 (28-30s): CTA. M·ªói c·∫£nh c√≥ timeline c·ª• th·ªÉ v√† m√¥ t·∫£ chi ti·∫øt.",
      "cta": "L·ªùi k√™u g·ªçi h√†nh ƒë·ªông r√µ r√†ng. V√≠ d·ª•: 'Mua ngay ƒë·ªÉ tr·∫£i nghi·ªám!'",
      "expected_performance": "Phi√™n b·∫£n 1: D·ª± ki·∫øn tƒÉng CTR 28-38% v√† conversion rate 16-24% v√¨ demo t√≠nh nƒÉng tr·ª±c quan t·∫°o trust, gi·∫£m uncertainty v√† tƒÉng confidence trong s·∫£n ph·∫©m."
    }${num_versions > 1 ? `,
    {
      "ad_headline": "Phi√™n b·∫£n 2: G√≥c ti·∫øp c·∫≠n kh√°c, c√≥ th·ªÉ t·∫≠p trung v√†o t√≠nh nƒÉng ho·∫∑c l·ª£i √≠ch kh√°c bi·ªát.",
      "ad_copy": "Phi√™n b·∫£n 2: N·ªôi dung v·ªõi tone kh√°c, c√≥ th·ªÉ chuy√™n nghi·ªáp h∆°n ho·∫∑c th√¢n thi·ªán h∆°n, v·∫´n theo framework ${format}.",
      "ad_visual_idea": "Phi√™n b·∫£n 2: K·ªãch b·∫£n video TikTok 30 gi√¢y v·ªõi g√≥c nh√¨n kh√°c. Chia th√†nh 5 c·∫£nh: C·∫£nh 1 (0-4s): Hook v·ªõi l·ª£i √≠ch. C·∫£nh 2 (5-10s): Gi·ªõi thi·ªáu t√≠nh nƒÉng. C·∫£nh 3 (11-18s): Qu√° tr√¨nh s·ª≠ d·ª•ng. C·∫£nh 4 (19-25s): K·∫øt qu·∫£ cu·ªëi c√πng. C·∫£nh 5 (26-30s): CTA. Timeline chi ti·∫øt cho t·ª´ng c·∫£nh.",
      "cta": "CTA kh√°c bi·ªát, c√≥ th·ªÉ 'Kh√°m ph√° t√≠nh nƒÉng!' ho·∫∑c 'Tr·∫£i nghi·ªám ngay!'",
      "expected_performance": "Phi√™n b·∫£n 2: D·ª± ki·∫øn tƒÉng CTR 22-32% v√† conversion rate 14-20% v√¨ focus v√†o l·ª£i √≠ch th·ª±c t·∫ø thu h√∫t kh√°ch h√†ng quan t√¢m ƒë·∫øn value, tƒÉng quality traffic."
    }` : ''}${num_versions > 2 ? `,
    {
      "ad_headline": "Phi√™n b·∫£n 3: G√≥c ti·∫øp c·∫≠n th·ª© ba, c√≥ th·ªÉ s·ª≠ d·ª•ng urgency ho·∫∑c social proof.",
      "ad_copy": "Phi√™n b·∫£n 3: N·ªôi dung v·ªõi approach kh√°c, c√≥ th·ªÉ s·ª≠ d·ª•ng urgency, scarcity ho·∫∑c social proof, v·∫´n theo framework ${format}.",
      "ad_visual_idea": "Phi√™n b·∫£n 3: K·ªãch b·∫£n video TikTok 30 gi√¢y v·ªõi concept so s√°nh/testimonial. Chia th√†nh 7 c·∫£nh: C·∫£nh 1 (0-2s): Hook so s√°nh. C·∫£nh 2 (3-7s): S·∫£n ph·∫©m c≈©/v·∫•n ƒë·ªÅ. C·∫£nh 3 (8-12s): Gi·ªõi thi·ªáu s·∫£n ph·∫©m m·ªõi. C·∫£nh 4 (13-19s): Demo t√≠nh nƒÉng v∆∞·ª£t tr·ªôi. C·∫£nh 5 (20-24s): Testimonial/feedback. C·∫£nh 6 (25-28s): So s√°nh tr·ª±c ti·∫øp. C·∫£nh 7 (29-30s): CTA. M·ªói c·∫£nh c√≥ timeline c·ª• th·ªÉ.",
      "cta": "CTA th·ª© ba, c√≥ th·ªÉ 'ƒê·ª´ng b·ªè l·ª°!' ho·∫∑c 'H√†ng ng√†n ng∆∞·ªùi ƒë√£ tin t∆∞·ªüng!'",
      "expected_performance": "Phi√™n b·∫£n 3: D·ª± ki·∫øn tƒÉng CTR 32-42% v√† conversion rate 20-28% v√¨ so s√°nh tr·ª±c ti·∫øp t·∫°o competitive advantage r√µ r√†ng, gi√∫p kh√°ch h√†ng th·∫•y ƒë∆∞·ª£c s·ª± v∆∞·ª£t tr·ªôi c·ªßa s·∫£n ph·∫©m."
    }` : ''}
  ]
}`;
    }

    console.log('üé¨ [AI Ads Generator] Prompt built, calling AI service...');
    console.log('üé¨ [AI Ads Generator] Prompt preview:', prompt.substring(0, 200) + '...');

    // Call AI service
    const aiResponse = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.OPENROUTER_API_KEY}`,
        'Content-Type': 'application/json',
        'HTTP-Referer': process.env.OPENROUTER_REFERER || 'http://localhost:3000',
        'X-Title': 'AIComercer Ads Generator'
      },
      body: JSON.stringify({
        model: model,
        messages: [
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 2000,
        temperature: 0.7
      })
    });

    console.log('üé¨ [AI Ads Generator] AI response status:', aiResponse.status);

    if (!aiResponse.ok) {
      const errorText = await aiResponse.text();
      console.error('üé¨ [AI Ads Generator] AI service error:', errorText);
      throw new Error(`AI service error: ${aiResponse.status} - ${errorText}`);
    }

    const aiData = await aiResponse.json() as any;
    const aiContent = aiData.choices?.[0]?.message?.content;

    console.log('üé¨ [AI Ads Generator] AI content received:', aiContent ? 'Yes' : 'No');

    if (!aiContent) {
      console.error('üé¨ [AI Ads Generator] No content from AI:', aiData);
      throw new Error('No content from AI');
    }

    // Parse AI response with improved error handling
    let adResult;
    try {
      // Clean the AI response first
      let cleanContent = aiContent.trim();
      
      // Remove any text before the first { and after the last }
      const firstBrace = cleanContent.indexOf('{');
      const lastBrace = cleanContent.lastIndexOf('}');
      
      if (firstBrace !== -1 && lastBrace !== -1 && lastBrace > firstBrace) {
        cleanContent = cleanContent.substring(firstBrace, lastBrace + 1);
      }
      
      // Try to fix common JSON issues
      cleanContent = cleanContent
        .replace(/\\n/g, ' ')  // Replace \n with space
        .replace(/\\"/g, '"')  // Fix escaped quotes
        .replace(/\\'/g, "'")  // Fix escaped single quotes
        .replace(/\\\\/g, '\\'); // Fix double backslashes
      
      console.log('üé¨ [AI Ads Generator] Cleaned content:', cleanContent.substring(0, 200) + '...');
      
      adResult = JSON.parse(cleanContent);
      console.log('üé¨ [AI Ads Generator] JSON parsed successfully');
      
      // Handle multiple versions format
      if (adResult.versions && Array.isArray(adResult.versions)) {
        adResult = { versions: adResult.versions };
      }
      
    } catch (parseError) {
      console.log('üé¨ [AI Ads Generator] JSON parse failed:', parseError instanceof Error ? parseError.message : String(parseError));
      console.log('üé¨ [AI Ads Generator] Raw content:', aiContent.substring(0, 500) + '...');
      
      // Try to extract JSON from the content
      try {
        const jsonMatch = aiContent.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          const extractedJson = jsonMatch[0]
            .replace(/\\n/g, ' ')
            .replace(/\\"/g, '"')
            .replace(/\\'/g, "'");
          
          adResult = JSON.parse(extractedJson);
          console.log('üé¨ [AI Ads Generator] Extracted JSON parsed successfully');
          
          if (adResult.versions && Array.isArray(adResult.versions)) {
            adResult = { versions: adResult.versions };
          }
        } else {
          throw new Error('No JSON found in content');
        }
      } catch (extractError) {
        console.log('üé¨ [AI Ads Generator] JSON extraction failed, using fallback');
        // Fallback if JSON parsing fails
        adResult = {
          ad_headline: "S·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao",
          ad_copy: aiContent,
          ad_visual_idea: "T·∫°o video showcase s·∫£n ph·∫©m",
          cta: "Mua ngay"
        };
      }
    }

    console.log('üé¨ [AI Ads Generator] Returning result:', adResult);
    res.json(adResult);

  } catch (error) {
    console.error('üé¨ [AI Ads Generator] Error:', error);
    res.status(500).json({ message: 'Internal server error', error: error instanceof Error ? error.message : 'Unknown error' });
  }
});

export default router;