// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  credits   Int      @default(10)
  isActive  Boolean  @default(true)
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  imageProcesses ImageProcess[]
  products      Product[]

  @@map("users")
}

model ImageProcess {
  id               String   @id @default(uuid())
  userId           String
  modelImageUrl    String
  productImageUrl  String
  resultImageUrl   String?
  status           String   @default("PENDING")
  errorMessage     String?
  metadata         String?  // JSON as string for SQLite
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("image_processes")
}

model Admin {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("ADMIN")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sessions AdminSession[]

  @@map("admins")
}

model AdminSession {
  id        String   @id @default(uuid())
  adminId   String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  admin Admin @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_sessions")
}

model Product {
  id              String   @id @default(uuid())
  user_id         String
  name            String
  description     String?
  image_url       String?
  product_url     String?
  status          String   @default("waiting") // waiting, processing, done, error
  analysis_result String?  // JSON as string for SQLite
  error_message   String?
  created_at      DateTime @default(now())
  analyzed_at     DateTime?
  updated_at      DateTime @updatedAt

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("products")
}

model SystemConfig {
  id        String   @id @default(uuid())
  key       String   @unique
  value     String
  type      String   @default("STRING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_configs")
}
